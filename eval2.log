Loading config configs/7_datasets/Base-Cityscapes-SemanticSegmentation_hrnet.yaml with yaml.unsafe_load. Your machine may be at risk if the file contains malicious content.
Command Line Args: Namespace(config_file='configs/7_datasets/hrnet_bs16_90k.yaml', dist_url='tcp://127.0.0.1:50347', eval_only=True, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.WEIGHTS', 'output/model_0014999.pth'], resume=False)
[03/05 19:50:18 detectron2]: Rank of current process: 0. World size: 1
[03/05 19:50:19 detectron2]: Environment info:
-------------------------------  -----------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.10 (default, Nov 22 2023, 10:22:35) [GCC 9.4.0]
numpy                            1.24.4
detectron2                       0.6 @/home/mr_22210240239/.local/lib/python3.8/site-packages/detectron2
Compiler                         GCC 11.4
CUDA compiler                    CUDA 11.7
detectron2 arch flags            8.0
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          2.0.1+cu117 @/usr/local/lib/python3.8/dist-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0                            NVIDIA A100-SXM4-80GB (arch=8.0)
Driver version                   470.199.02
CUDA_HOME                        /usr/local/cuda-11.7
Pillow                           10.2.0
torchvision                      0.15.2+cu117 @/usr/local/lib/python3.8/dist-packages/torchvision
torchvision arch flags           3.5, 5.0, 6.0, 7.0, 7.5, 8.0, 8.6
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.9.0
-------------------------------  -----------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2022.2-Product Build 20220804 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.7.3 (Git Hash 6dbeffbae1f23cbbeae17adb7b5b13f1f37c080e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.0.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[03/05 19:50:19 detectron2]: Command line arguments: Namespace(config_file='configs/7_datasets/hrnet_bs16_90k.yaml', dist_url='tcp://127.0.0.1:50347', eval_only=True, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.WEIGHTS', 'output/model_0014999.pth'], resume=False)
[03/05 19:50:19 detectron2]: Contents of args.config_file=configs/7_datasets/hrnet_bs16_90k.yaml:
[38;5;197m_BASE_[39m[38;5;15m:[39m[38;5;15m [39mBase-Cityscapes-SemanticSegmentation_hrnet.yaml
[38;5;197mMODEL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mMETA_ARCHITECTURE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mHRNet_W48_ARCH[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;197mSEM_SEG_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mHRNet_W48[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mOUTPUT_FEAT_DIM[39m[38;5;15m:[39m[38;5;15m [39m512
[38;5;15m    [39m[38;5;197mWITH_DATASETS_AUX[39m[38;5;15m:[39m[38;5;15m [39mFalse
[38;5;15m    [39m[38;5;197mBN_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mtorchbn[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;197mGNN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mNFEAT[39m[38;5;15m:[39m[38;5;15m [39m1024
[38;5;15m    [39m[38;5;197mNFEAT_OUT[39m[38;5;15m:[39m[38;5;15m [39m512
[38;5;15m    [39m[38;5;197mnfeat_adj[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197madj_feat_dim[39m[38;5;15m:[39m[38;5;15m [39m128
[38;5;15m    [39m[38;5;197mdropout_rate[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mthreshold_value[39m[38;5;15m:[39m[38;5;15m [39m0.95
[38;5;15m    [39m[38;5;197mcalc_bipartite[39m[38;5;15m:[39m[38;5;15m [39mFalse
[38;5;15m    [39m[38;5;197moutput_max_adj[39m[38;5;15m:[39m[38;5;15m [39mTrue
[38;5;15m    [39m[38;5;197moutput_softmax_adj[39m[38;5;15m:[39m[38;5;15m [39mTrue
[38;5;15m    [39m[38;5;197muot_ratio[39m[38;5;15m:[39m[38;5;15m [39m1.01
[38;5;15m    [39m[38;5;197mmse_or_adv[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mNone[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mGNN_type[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mGSAGE[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mwith_datasets_aux[39m[38;5;15m:[39m[38;5;15m [39mTrue
[38;5;15m    [39m[38;5;197minit_stage_iters[39m[38;5;15m:[39m[38;5;15m [39m10000
[38;5;15m    [39m[38;5;197misGumbelSoftmax[39m[38;5;15m:[39m[38;5;15m [39mFalse
[38;5;15m    [39m[38;5;197mGNN_ITERS[39m[38;5;15m:[39m[38;5;15m [39m20000
[38;5;15m    [39m[38;5;197mSEG_ITERS[39m[38;5;15m:[39m[38;5;15m [39m20000
[38;5;15m    [39m[38;5;197mFIRST_STAGE_GNN_ITERS[39m[38;5;15m:[39m[38;5;15m [39m15000
[38;5;15m    [39m[38;5;197mINIT_ADJ_PATH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186moutput/init_adj_7_datasets.pt[39m[38;5;186m"[39m

[03/05 19:50:19 detectron2]: Running with full config:
[38;5;197mCUDNN_BENCHMARK[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;197mDATALOADER[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mASPECT_RATIO_GROUPING[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m  [39m[38;5;197mFILTER_EMPTY_ANNOTATIONS[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m  [39m[38;5;197mNUM_WORKERS[39m[38;5;15m:[39m[38;5;15m [39m4
[38;5;15m  [39m[38;5;197mREPEAT_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m  [39m[38;5;197mSAMPLER_TRAIN[39m[38;5;15m:[39m[38;5;15m [39mTrainingSampler
[38;5;197mDATASETS[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mCONFIGER[39m[38;5;15m:[39m[38;5;15m [39mconfigs/ltbgnn_7_datasets_snp.json
[38;5;15m  [39m[38;5;197mDATASETS_CATS[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39m19
[38;5;15m  [39m-[38;5;15m [39m64
[38;5;15m  [39m-[38;5;15m [39m37
[38;5;15m  [39m-[38;5;15m [39m19
[38;5;15m  [39m-[38;5;15m [39m26
[38;5;15m  [39m-[38;5;15m [39m150
[38;5;15m  [39m-[38;5;15m [39m133
[38;5;15m  [39m[38;5;197mIGNORE_LB[39m[38;5;15m:[39m[38;5;15m [39m255
[38;5;15m  [39m[38;5;197mNUM_UNIFY_CLASS[39m[38;5;15m:[39m[38;5;15m [39m448
[38;5;15m  [39m[38;5;197mPRECOMPUTED_PROPOSAL_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m  [39m[38;5;197mPRECOMPUTED_PROPOSAL_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m2000
[38;5;15m  [39m[38;5;197mPROPOSAL_FILES_TEST[39m[38;5;15m:[39m[38;5;15m [39m[]
[38;5;15m  [39m[38;5;197mPROPOSAL_FILES_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[]
[38;5;15m  [39m[38;5;197mTEST[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39mcs_sem_seg_val
[38;5;15m  [39m-[38;5;15m [39msunrgbd_sem_seg_val
[38;5;15m  [39m-[38;5;15m [39mbdd_sem_seg_val
[38;5;15m  [39m-[38;5;15m [39midd_sem_seg_val
[38;5;15m  [39m-[38;5;15m [39made_sem_seg_val
[38;5;15m  [39m-[38;5;15m [39mcoco_sem_seg_val
[38;5;15m  [39m[38;5;197mTRAIN[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39mcityscapes_fine_sem_seg_train
[38;5;15m  [39m-[38;5;15m [39mmapi_sem_seg_train
[38;5;15m  [39m-[38;5;15m [39msunrgbd_sem_seg_train
[38;5;15m  [39m-[38;5;15m [39mbdd_sem_seg_train
[38;5;15m  [39m-[38;5;15m [39midd_sem_seg_train
[38;5;15m  [39m-[38;5;15m [39made20k_sem_seg_train
[38;5;15m  [39m-[38;5;15m [39mcoco_sem_seg_train
[38;5;197mGLOBAL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mHACK[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;197mINPUT[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mCOLOR_AUG_SSD[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m  [39m[38;5;197mCROP[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mSINGLE_CATEGORY_MAX_AREA[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mSIZE[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m768
[38;5;15m    [39m-[38;5;15m [39m768
[38;5;15m    [39m[38;5;197mTYPE[39m[38;5;15m:[39m[38;5;15m [39mabsolute
[38;5;15m  [39m[38;5;197mDATASET_MAPPER_NAME[39m[38;5;15m:[39m[38;5;15m [39mDALI
[38;5;15m  [39m[38;5;197mFORMAT[39m[38;5;15m:[39m[38;5;15m [39mRGB
[38;5;15m  [39m[38;5;197mIMAGE_SIZE[39m[38;5;15m:[39m[38;5;15m [39m1024
[38;5;15m  [39m[38;5;197mMASK_FORMAT[39m[38;5;15m:[39m[38;5;15m [39mpolygon
[38;5;15m  [39m[38;5;197mMAX_SCALE[39m[38;5;15m:[39m[38;5;15m [39m2.0
[38;5;15m  [39m[38;5;197mMAX_SIZE_TEST[39m[38;5;15m:[39m[38;5;15m [39m4096
[38;5;15m  [39m[38;5;197mMAX_SIZE_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m4096
[38;5;15m  [39m[38;5;197mMIN_SCALE[39m[38;5;15m:[39m[38;5;15m [39m0.1
[38;5;15m  [39m[38;5;197mMIN_SIZE_TEST[39m[38;5;15m:[39m[38;5;15m [39m512
[38;5;15m  [39m[38;5;197mMIN_SIZE_TRAIN[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39m512
[38;5;15m  [39m-[38;5;15m [39m614
[38;5;15m  [39m-[38;5;15m [39m716
[38;5;15m  [39m-[38;5;15m [39m819
[38;5;15m  [39m-[38;5;15m [39m921
[38;5;15m  [39m-[38;5;15m [39m1024
[38;5;15m  [39m-[38;5;15m [39m1126
[38;5;15m  [39m-[38;5;15m [39m1228
[38;5;15m  [39m-[38;5;15m [39m1331
[38;5;15m  [39m-[38;5;15m [39m1433
[38;5;15m  [39m-[38;5;15m [39m1536
[38;5;15m  [39m-[38;5;15m [39m1638
[38;5;15m  [39m-[38;5;15m [39m1740
[38;5;15m  [39m-[38;5;15m [39m1843
[38;5;15m  [39m-[38;5;15m [39m1945
[38;5;15m  [39m-[38;5;15m [39m2048
[38;5;15m  [39m[38;5;197mMIN_SIZE_TRAIN_SAMPLING[39m[38;5;15m:[39m[38;5;15m [39mchoice
[38;5;15m  [39m[38;5;197mRANDOM_FLIP[39m[38;5;15m:[39m[38;5;15m [39mhorizontal
[38;5;15m  [39m[38;5;197mSIZE_DIVISIBILITY[39m[38;5;15m:[39m[38;5;15m [39m-1
[38;5;197mLOSS[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mOHEM_THRESH[39m[38;5;15m:[39m[38;5;15m [39m0.7
[38;5;197mMODEL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mANCHOR_GENERATOR[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mANGLES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m-90
[38;5;15m      [39m-[38;5;15m [39m0
[38;5;15m      [39m-[38;5;15m [39m90
[38;5;15m    [39m[38;5;197mASPECT_RATIOS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m0.5
[38;5;15m      [39m-[38;5;15m [39m1.0
[38;5;15m      [39m-[38;5;15m [39m2.0
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mDefaultAnchorGenerator
[38;5;15m    [39m[38;5;197mOFFSET[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m    [39m[38;5;197mSIZES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m32
[38;5;15m      [39m-[38;5;15m [39m64
[38;5;15m      [39m-[38;5;15m [39m128
[38;5;15m      [39m-[38;5;15m [39m256
[38;5;15m      [39m-[38;5;15m [39m512
[38;5;15m  [39m[38;5;197mAUX_MODE[39m[38;5;15m:[39m[38;5;15m [39mtrain
[38;5;15m  [39m[38;5;197mBACKBONE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mFREEZE_AT[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mHighResolutionNet
[38;5;15m  [39m[38;5;197mDEVICE[39m[38;5;15m:[39m[38;5;15m [39mcuda
[38;5;15m  [39m[38;5;197mFPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mFUSE_TYPE[39m[38;5;15m:[39m[38;5;15m [39msum
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m[38;5;15m [39m[]
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mOUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m  [39m[38;5;197mGNN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mFIRST_STAGE_GNN_ITERS[39m[38;5;15m:[39m[38;5;15m [39m15000
[38;5;15m    [39m[38;5;197mGNN_ITERS[39m[38;5;15m:[39m[38;5;15m [39m20000
[38;5;15m    [39m[38;5;197mGNN_type[39m[38;5;15m:[39m[38;5;15m [39mGSAGE
[38;5;15m    [39m[38;5;197mINIT_ADJ_PATH[39m[38;5;15m:[39m[38;5;15m [39moutput/init_adj_7_datasets.pt
[38;5;15m    [39m[38;5;197mNFEAT[39m[38;5;15m:[39m[38;5;15m [39m1024
[38;5;15m    [39m[38;5;197mNFEAT_OUT[39m[38;5;15m:[39m[38;5;15m [39m512
[38;5;15m    [39m[38;5;197mSEG_ITERS[39m[38;5;15m:[39m[38;5;15m [39m20000
[38;5;15m    [39m[38;5;197madj_feat_dim[39m[38;5;15m:[39m[38;5;15m [39m128
[38;5;15m    [39m[38;5;197mcalc_bipartite[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mdropout_rate[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197minit_stage_iters[39m[38;5;15m:[39m[38;5;15m [39m10000
[38;5;15m    [39m[38;5;197misGumbelSoftmax[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mmse_or_adv[39m[38;5;15m:[39m[38;5;15m [39mnull
[38;5;15m    [39m[38;5;197mnfeat_adj[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197moutput_max_adj[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197moutput_softmax_adj[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mthreshold_value[39m[38;5;15m:[39m[38;5;15m [39m0.95
[38;5;15m    [39m[38;5;197muot_ratio[39m[38;5;15m:[39m[38;5;15m [39m1.01
[38;5;15m    [39m[38;5;197mwith_datasets_aux[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m  [39m[38;5;197mHRNET[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBN_TYPE[39m[38;5;15m:[39m[38;5;15m [39mtorchbn
[38;5;15m    [39m[38;5;197mDROP_STAGE4[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mFULL_RES_STEM[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mHRNET_CFG[39m[38;5;15m:[39m[38;5;15m [39mhrnet48
[38;5;15m    [39m[38;5;197mKEEP_IMAGENET_HEAD[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mKEYPOINT_ON[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mLOAD_PROPOSALS[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mMASK_ON[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mMETA_ARCHITECTURE[39m[38;5;15m:[39m[38;5;15m [39mHRNet_W48_ARCH
[38;5;15m  [39m[38;5;197mPANOPTIC_FPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCOMBINE[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m      [39m[38;5;197mINSTANCES_CONFIDENCE_THRESH[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m      [39m[38;5;197mOVERLAP_THRESH[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m      [39m[38;5;197mSTUFF_AREA_LIMIT[39m[38;5;15m:[39m[38;5;15m [39m4096
[38;5;15m    [39m[38;5;197mINSTANCE_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m  [39m[38;5;197mPIXEL_MEAN[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39m123.675
[38;5;15m  [39m-[38;5;15m [39m116.28
[38;5;15m  [39m-[38;5;15m [39m103.53
[38;5;15m  [39m[38;5;197mPIXEL_STD[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39m58.395
[38;5;15m  [39m-[38;5;15m [39m57.12
[38;5;15m  [39m-[38;5;15m [39m57.375
[38;5;15m  [39m[38;5;197mPRETRAINING[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m  [39m[38;5;197mPROPOSAL_GENERATOR[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mMIN_SIZE[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mRPN
[38;5;15m  [39m[38;5;197mRESNETS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mDEFORM_MODULATED[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mDEFORM_NUM_GROUPS[39m[38;5;15m:[39m[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mDEFORM_ON_PER_STAGE[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mfalse
[38;5;15m    [39m-[38;5;15m [39mfalse
[38;5;15m    [39m-[38;5;15m [39mfalse
[38;5;15m    [39m-[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mDEPTH[39m[38;5;15m:[39m[38;5;15m [39m50
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39mFrozenBN
[38;5;15m    [39m[38;5;197mNUM_GROUPS[39m[38;5;15m:[39m[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mOUT_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mres4
[38;5;15m    [39m[38;5;197mRES2_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mRES4_DILATION[39m[38;5;15m:[39m[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mRES5_DILATION[39m[38;5;15m:[39m[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mRES5_MULTI_GRID[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m1
[38;5;15m    [39m-[38;5;15m [39m2
[38;5;15m    [39m-[38;5;15m [39m4
[38;5;15m    [39m[38;5;197mSTEM_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m64
[38;5;15m    [39m[38;5;197mSTEM_TYPE[39m[38;5;15m:[39m[38;5;15m [39mdeeplab
[38;5;15m    [39m[38;5;197mSTRIDE_IN_1X1[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mWIDTH_PER_GROUP[39m[38;5;15m:[39m[38;5;15m [39m64
[38;5;15m  [39m[38;5;197mRETINANET[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39msmooth_l1
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m&id002[39m
[38;5;15m    [39m-[38;5;15m [39m1.0
[38;5;15m    [39m-[38;5;15m [39m1.0
[38;5;15m    [39m-[38;5;15m [39m1.0
[38;5;15m    [39m-[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mFOCAL_LOSS_ALPHA[39m[38;5;15m:[39m[38;5;15m [39m0.25
[38;5;15m    [39m[38;5;197mFOCAL_LOSS_GAMMA[39m[38;5;15m:[39m[38;5;15m [39m2.0
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mp3
[38;5;15m    [39m-[38;5;15m [39mp4
[38;5;15m    [39m-[38;5;15m [39mp5
[38;5;15m    [39m-[38;5;15m [39mp6
[38;5;15m    [39m-[38;5;15m [39mp7
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0
[38;5;15m    [39m-[38;5;15m [39m-1
[38;5;15m    [39m-[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0.4
[38;5;15m    [39m-[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mNMS_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m80
[38;5;15m    [39m[38;5;197mNUM_CONVS[39m[38;5;15m:[39m[38;5;15m [39m4
[38;5;15m    [39m[38;5;197mPRIOR_PROB[39m[38;5;15m:[39m[38;5;15m [39m0.01
[38;5;15m    [39m[38;5;197mSCORE_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m0.05
[38;5;15m    [39m[38;5;197mSMOOTH_L1_LOSS_BETA[39m[38;5;15m:[39m[38;5;15m [39m0.1
[38;5;15m    [39m[38;5;197mTOPK_CANDIDATES_TEST[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m  [39m[38;5;197mROI_BOX_CASCADE_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m[38;5;15m&id001[39m
[38;5;15m      [39m-[38;5;15m [39m10.0
[38;5;15m      [39m-[38;5;15m [39m10.0
[38;5;15m      [39m-[38;5;15m [39m5.0
[38;5;15m      [39m-[38;5;15m [39m5.0
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m20.0
[38;5;15m      [39m-[38;5;15m [39m20.0
[38;5;15m      [39m-[38;5;15m [39m10.0
[38;5;15m      [39m-[38;5;15m [39m10.0
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m30.0
[38;5;15m      [39m-[38;5;15m [39m30.0
[38;5;15m      [39m-[38;5;15m [39m15.0
[38;5;15m      [39m-[38;5;15m [39m15.0
[38;5;15m    [39m[38;5;197mIOUS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0.5
[38;5;15m    [39m-[38;5;15m [39m0.6
[38;5;15m    [39m-[38;5;15m [39m0.7
[38;5;15m  [39m[38;5;197mROI_BOX_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39msmooth_l1
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m*id001[39m
[38;5;15m    [39m[38;5;197mCLS_AGNOSTIC_BBOX_REG[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mCONV_DIM[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mFC_DIM[39m[38;5;15m:[39m[38;5;15m [39m1024
[38;5;15m    [39m[38;5;197mFED_LOSS_FREQ_WEIGHT_POWER[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mFED_LOSS_NUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m50
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_CONV[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mNUM_FC[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m14
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39mROIAlignV2
[38;5;15m    [39m[38;5;197mSMOOTH_L1_BETA[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m    [39m[38;5;197mTRAIN_ON_PRED_BOXES[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mUSE_FED_LOSS[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mUSE_SIGMOID_CE[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mROI_HEADS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBATCH_SIZE_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m512
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mres4
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0
[38;5;15m    [39m-[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mRes5ROIHeads
[38;5;15m    [39m[38;5;197mNMS_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m80
[38;5;15m    [39m[38;5;197mPOSITIVE_FRACTION[39m[38;5;15m:[39m[38;5;15m [39m0.25
[38;5;15m    [39m[38;5;197mPROPOSAL_APPEND_GT[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mSCORE_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m0.05
[38;5;15m  [39m[38;5;197mROI_KEYPOINT_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCONV_DIMS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mMIN_KEYPOINTS_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mKRCNNConvDeconvUpsampleHead
[38;5;15m    [39m[38;5;197mNORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mNUM_KEYPOINTS[39m[38;5;15m:[39m[38;5;15m [39m17
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m14
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39mROIAlignV2
[38;5;15m  [39m[38;5;197mROI_MASK_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCLS_AGNOSTIC_MASK[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mCONV_DIM[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mMaskRCNNConvUpsampleHead
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_CONV[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m14
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39mROIAlignV2
[38;5;15m  [39m[38;5;197mRPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBATCH_SIZE_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39msmooth_l1
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m*id002[39m
[38;5;15m    [39m[38;5;197mBOUNDARY_THRESH[39m[38;5;15m:[39m[38;5;15m [39m-1
[38;5;15m    [39m[38;5;197mCONV_DIMS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m-1
[38;5;15m    [39m[38;5;197mHEAD_NAME[39m[38;5;15m:[39m[38;5;15m [39mStandardRPNHead
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mres4
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0
[38;5;15m    [39m-[38;5;15m [39m-1
[38;5;15m    [39m-[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0.3
[38;5;15m    [39m-[38;5;15m [39m0.7
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mNMS_THRESH[39m[38;5;15m:[39m[38;5;15m [39m0.7
[38;5;15m    [39m[38;5;197mPOSITIVE_FRACTION[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m2000
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m6000
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m12000
[38;5;15m    [39m[38;5;197mSMOOTH_L1_BETA[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m  [39m[38;5;197mSEM_SEG_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mASPP_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mASPP_DILATIONS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m6
[38;5;15m    [39m-[38;5;15m [39m12
[38;5;15m    [39m-[38;5;15m [39m18
[38;5;15m    [39m[38;5;197mASPP_DROPOUT[39m[38;5;15m:[39m[38;5;15m [39m0.1
[38;5;15m    [39m[38;5;197mBN_TYPE[39m[38;5;15m:[39m[38;5;15m [39mtorchbn
[38;5;15m    [39m[38;5;197mCOMMON_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m4
[38;5;15m    [39m[38;5;197mCONVS_DIM[39m[38;5;15m:[39m[38;5;15m [39m128
[38;5;15m    [39m[38;5;197mIGNORE_VALUE[39m[38;5;15m:[39m[38;5;15m [39m255
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mp2
[38;5;15m    [39m-[38;5;15m [39mp3
[38;5;15m    [39m-[38;5;15m [39mp4
[38;5;15m    [39m-[38;5;15m [39mp5
[38;5;15m    [39m[38;5;197mLOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39mhard_pixel_mining
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mHRNet_W48
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39mGN
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m54
[38;5;15m    [39m[38;5;197mOUTPUT_FEAT_DIM[39m[38;5;15m:[39m[38;5;15m [39m512
[38;5;15m    [39m[38;5;197mPROJECT_CHANNELS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m48
[38;5;15m    [39m[38;5;197mPROJECT_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mres2
[38;5;15m    [39m[38;5;197mUSE_DEPTHWISE_SEPARABLE_CONV[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mWITH_DATASETS_AUX[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mSIZE_DIVISIBILITY[39m[38;5;15m:[39m[38;5;15m [39m-1
[38;5;15m  [39m[38;5;197mWEIGHTS[39m[38;5;15m:[39m[38;5;15m [39moutput/model_0014999.pth
[38;5;15m  [39m[38;5;197mWITH_DATASETS_AUX[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;197mOUTPUT_DIR[39m[38;5;15m:[39m[38;5;15m [39m./output
[38;5;197mSEED[39m[38;5;15m:[39m[38;5;15m [39m-1
[38;5;197mSOLVER[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mAMP[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m  [39m[38;5;197mBACKBONE_MULTIPLIER[39m[38;5;15m:[39m[38;5;15m [39m0.1
[38;5;15m  [39m[38;5;197mBASE_LR[39m[38;5;15m:[39m[38;5;15m [39m0.0001
[38;5;15m  [39m[38;5;197mBASE_LR_END[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m  [39m[38;5;197mBIAS_LR_FACTOR[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m  [39m[38;5;197mCHECKPOINT_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m5000
[38;5;15m  [39m[38;5;197mCLIP_GRADIENTS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCLIP_TYPE[39m[38;5;15m:[39m[38;5;15m [39mfull_model
[38;5;15m    [39m[38;5;197mCLIP_VALUE[39m[38;5;15m:[39m[38;5;15m [39m0.01
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mNORM_TYPE[39m[38;5;15m:[39m[38;5;15m [39m2.0
[38;5;15m  [39m[38;5;197mGAMMA[39m[38;5;15m:[39m[38;5;15m [39m0.1
[38;5;15m  [39m[38;5;197mIMS_PER_BATCH[39m[38;5;15m:[39m[38;5;15m [39m4
[38;5;15m  [39m[38;5;197mLR_SCHEDULER_NAME[39m[38;5;15m:[39m[38;5;15m [39mWarmupPolyLR
[38;5;15m  [39m[38;5;197mMAX_ITER[39m[38;5;15m:[39m[38;5;15m [39m100000
[38;5;15m  [39m[38;5;197mMOMENTUM[39m[38;5;15m:[39m[38;5;15m [39m0.9
[38;5;15m  [39m[38;5;197mNESTEROV[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mNUM_DECAYS[39m[38;5;15m:[39m[38;5;15m [39m3
[38;5;15m  [39m[38;5;197mOPTIMIZER[39m[38;5;15m:[39m[38;5;15m [39mADAMW
[38;5;15m  [39m[38;5;197mPOLY_LR_CONSTANT_ENDING[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m  [39m[38;5;197mPOLY_LR_POWER[39m[38;5;15m:[39m[38;5;15m [39m0.9
[38;5;15m  [39m[38;5;197mREFERENCE_WORLD_SIZE[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m  [39m[38;5;197mRESCALE_INTERVAL[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mSTEPS[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39m30000
[38;5;15m  [39m[38;5;197mWARMUP_FACTOR[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m  [39m[38;5;197mWARMUP_ITERS[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m  [39m[38;5;197mWARMUP_METHOD[39m[38;5;15m:[39m[38;5;15m [39mlinear
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY[39m[38;5;15m:[39m[38;5;15m [39m0.05
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY_BIAS[39m[38;5;15m:[39m[38;5;15m [39mnull
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY_EMBED[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY_NORM[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;197mTEST[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mAUG[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mFLIP[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mMAX_SIZE[39m[38;5;15m:[39m[38;5;15m [39m4096
[38;5;15m    [39m[38;5;197mMIN_SIZES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m768
[38;5;15m    [39m-[38;5;15m [39m1024
[38;5;15m    [39m-[38;5;15m [39m1280
[38;5;15m    [39m-[38;5;15m [39m1536
[38;5;15m    [39m-[38;5;15m [39m1792
[38;5;15m  [39m[38;5;197mDETECTIONS_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m100
[38;5;15m  [39m[38;5;197mEVAL_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m100000
[38;5;15m  [39m[38;5;197mEXPECTED_RESULTS[39m[38;5;15m:[39m[38;5;15m [39m[]
[38;5;15m  [39m[38;5;197mKEYPOINT_OKS_SIGMAS[39m[38;5;15m:[39m[38;5;15m [39m[]
[38;5;15m  [39m[38;5;197mPRECISE_BN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mNUM_ITER[39m[38;5;15m:[39m[38;5;15m [39m200
[38;5;197mVERSION[39m[38;5;15m:[39m[38;5;15m [39m2
[38;5;197mVIS_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m0

[03/05 19:50:19 detectron2]: Full config saved to ./output/config.yaml
[03/05 19:50:19 d2.utils.env]: Using a generated random seed 19900970
torch.Size([19, 1024])
[03/05 19:50:28 d2.engine.defaults]: Model:
HRNet_W48_ARCH(
  (backbone): HighResolutionNet(
    (conv1): Conv2d(3, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU()
    (layer1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU()
        (relu_in): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU()
        (relu_in): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU()
        (relu_in): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU()
        (relu_in): ReLU(inplace=True)
      )
    )
    (transition1): ModuleList(
      (0): Sequential(
        (0): Conv2d(256, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (1): Sequential(
        (0): Sequential(
          (0): Conv2d(256, 96, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
    )
    (stage2): Sequential(
      (0): HighResolutionModule(
        (branches): ModuleList(
          (0): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): BasicBlock(
              (conv1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (2): BasicBlock(
              (conv1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (3): BasicBlock(
              (conv1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): BasicBlock(
              (conv1): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (2): BasicBlock(
              (conv1): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (3): BasicBlock(
              (conv1): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (fuse_layers): ModuleList(
          (0): ModuleList(
            (0): None
            (1): Sequential(
              (0): Conv2d(96, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): ModuleList(
            (0): Sequential(
              (0): Sequential(
                (0): Conv2d(48, 96, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (1): None
          )
        )
        (relu): ReLU()
      )
    )
    (transition2): ModuleList(
      (0-1): 2 x None
      (2): Sequential(
        (0): Sequential(
          (0): Conv2d(96, 192, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
    )
    (stage3): Sequential(
      (0): HighResolutionModule(
        (branches): ModuleList(
          (0): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): BasicBlock(
              (conv1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (2): BasicBlock(
              (conv1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (3): BasicBlock(
              (conv1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): BasicBlock(
              (conv1): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (2): BasicBlock(
              (conv1): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (3): BasicBlock(
              (conv1): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): BasicBlock(
              (conv1): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (2): BasicBlock(
              (conv1): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (3): BasicBlock(
              (conv1): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (fuse_layers): ModuleList(
          (0): ModuleList(
            (0): None
            (1): Sequential(
              (0): Conv2d(96, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (2): Sequential(
              (0): Conv2d(192, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): ModuleList(
            (0): Sequential(
              (0): Sequential(
                (0): Conv2d(48, 96, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (1): None
            (2): Sequential(
              (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): ModuleList(
            (0): Sequential(
              (0): Sequential(
                (0): Conv2d(48, 48, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU()
              )
              (1): Sequential(
                (0): Conv2d(48, 192, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (1): Sequential(
              (0): Sequential(
                (0): Conv2d(96, 192, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (2): None
          )
        )
        (relu): ReLU()
      )
      (1): HighResolutionModule(
        (branches): ModuleList(
          (0): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): BasicBlock(
              (conv1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (2): BasicBlock(
              (conv1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (3): BasicBlock(
              (conv1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): BasicBlock(
              (conv1): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (2): BasicBlock(
              (conv1): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (3): BasicBlock(
              (conv1): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): BasicBlock(
              (conv1): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (2): BasicBlock(
              (conv1): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (3): BasicBlock(
              (conv1): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (fuse_layers): ModuleList(
          (0): ModuleList(
            (0): None
            (1): Sequential(
              (0): Conv2d(96, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (2): Sequential(
              (0): Conv2d(192, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): ModuleList(
            (0): Sequential(
              (0): Sequential(
                (0): Conv2d(48, 96, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (1): None
            (2): Sequential(
              (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): ModuleList(
            (0): Sequential(
              (0): Sequential(
                (0): Conv2d(48, 48, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU()
              )
              (1): Sequential(
                (0): Conv2d(48, 192, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (1): Sequential(
              (0): Sequential(
                (0): Conv2d(96, 192, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (2): None
          )
        )
        (relu): ReLU()
      )
      (2): HighResolutionModule(
        (branches): ModuleList(
          (0): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): BasicBlock(
              (conv1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (2): BasicBlock(
              (conv1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (3): BasicBlock(
              (conv1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): BasicBlock(
              (conv1): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (2): BasicBlock(
              (conv1): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (3): BasicBlock(
              (conv1): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): BasicBlock(
              (conv1): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (2): BasicBlock(
              (conv1): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (3): BasicBlock(
              (conv1): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (fuse_layers): ModuleList(
          (0): ModuleList(
            (0): None
            (1): Sequential(
              (0): Conv2d(96, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (2): Sequential(
              (0): Conv2d(192, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): ModuleList(
            (0): Sequential(
              (0): Sequential(
                (0): Conv2d(48, 96, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (1): None
            (2): Sequential(
              (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): ModuleList(
            (0): Sequential(
              (0): Sequential(
                (0): Conv2d(48, 48, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU()
              )
              (1): Sequential(
                (0): Conv2d(48, 192, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (1): Sequential(
              (0): Sequential(
                (0): Conv2d(96, 192, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (2): None
          )
        )
        (relu): ReLU()
      )
      (3): HighResolutionModule(
        (branches): ModuleList(
          (0): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): BasicBlock(
              (conv1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (2): BasicBlock(
              (conv1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (3): BasicBlock(
              (conv1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): BasicBlock(
              (conv1): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (2): BasicBlock(
              (conv1): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (3): BasicBlock(
              (conv1): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): BasicBlock(
              (conv1): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (2): BasicBlock(
              (conv1): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (3): BasicBlock(
              (conv1): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (fuse_layers): ModuleList(
          (0): ModuleList(
            (0): None
            (1): Sequential(
              (0): Conv2d(96, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (2): Sequential(
              (0): Conv2d(192, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): ModuleList(
            (0): Sequential(
              (0): Sequential(
                (0): Conv2d(48, 96, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (1): None
            (2): Sequential(
              (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): ModuleList(
            (0): Sequential(
              (0): Sequential(
                (0): Conv2d(48, 48, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU()
              )
              (1): Sequential(
                (0): Conv2d(48, 192, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (1): Sequential(
              (0): Sequential(
                (0): Conv2d(96, 192, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (2): None
          )
        )
        (relu): ReLU()
      )
    )
    (transition3): ModuleList(
      (0-2): 3 x None
      (3): Sequential(
        (0): Sequential(
          (0): Conv2d(192, 384, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
    )
    (stage4): Sequential(
      (0): HighResolutionModule(
        (branches): ModuleList(
          (0): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): BasicBlock(
              (conv1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (2): BasicBlock(
              (conv1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (3): BasicBlock(
              (conv1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): BasicBlock(
              (conv1): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (2): BasicBlock(
              (conv1): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (3): BasicBlock(
              (conv1): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): BasicBlock(
              (conv1): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (2): BasicBlock(
              (conv1): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (3): BasicBlock(
              (conv1): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (3): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): BasicBlock(
              (conv1): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (2): BasicBlock(
              (conv1): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (3): BasicBlock(
              (conv1): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (fuse_layers): ModuleList(
          (0): ModuleList(
            (0): None
            (1): Sequential(
              (0): Conv2d(96, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (2): Sequential(
              (0): Conv2d(192, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (3): Sequential(
              (0): Conv2d(384, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): ModuleList(
            (0): Sequential(
              (0): Sequential(
                (0): Conv2d(48, 96, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (1): None
            (2): Sequential(
              (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (3): Sequential(
              (0): Conv2d(384, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): ModuleList(
            (0): Sequential(
              (0): Sequential(
                (0): Conv2d(48, 48, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU()
              )
              (1): Sequential(
                (0): Conv2d(48, 192, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (1): Sequential(
              (0): Sequential(
                (0): Conv2d(96, 192, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (2): None
            (3): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (3): ModuleList(
            (0): Sequential(
              (0): Sequential(
                (0): Conv2d(48, 48, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU()
              )
              (1): Sequential(
                (0): Conv2d(48, 48, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU()
              )
              (2): Sequential(
                (0): Conv2d(48, 384, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (1): Sequential(
              (0): Sequential(
                (0): Conv2d(96, 96, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU()
              )
              (1): Sequential(
                (0): Conv2d(96, 384, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (2): Sequential(
              (0): Sequential(
                (0): Conv2d(192, 384, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (3): None
          )
        )
        (relu): ReLU()
      )
      (1): HighResolutionModule(
        (branches): ModuleList(
          (0): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): BasicBlock(
              (conv1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (2): BasicBlock(
              (conv1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (3): BasicBlock(
              (conv1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): BasicBlock(
              (conv1): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (2): BasicBlock(
              (conv1): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (3): BasicBlock(
              (conv1): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): BasicBlock(
              (conv1): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (2): BasicBlock(
              (conv1): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (3): BasicBlock(
              (conv1): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (3): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): BasicBlock(
              (conv1): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (2): BasicBlock(
              (conv1): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (3): BasicBlock(
              (conv1): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (fuse_layers): ModuleList(
          (0): ModuleList(
            (0): None
            (1): Sequential(
              (0): Conv2d(96, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (2): Sequential(
              (0): Conv2d(192, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (3): Sequential(
              (0): Conv2d(384, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): ModuleList(
            (0): Sequential(
              (0): Sequential(
                (0): Conv2d(48, 96, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (1): None
            (2): Sequential(
              (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (3): Sequential(
              (0): Conv2d(384, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): ModuleList(
            (0): Sequential(
              (0): Sequential(
                (0): Conv2d(48, 48, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU()
              )
              (1): Sequential(
                (0): Conv2d(48, 192, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (1): Sequential(
              (0): Sequential(
                (0): Conv2d(96, 192, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (2): None
            (3): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (3): ModuleList(
            (0): Sequential(
              (0): Sequential(
                (0): Conv2d(48, 48, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU()
              )
              (1): Sequential(
                (0): Conv2d(48, 48, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU()
              )
              (2): Sequential(
                (0): Conv2d(48, 384, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (1): Sequential(
              (0): Sequential(
                (0): Conv2d(96, 96, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU()
              )
              (1): Sequential(
                (0): Conv2d(96, 384, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (2): Sequential(
              (0): Sequential(
                (0): Conv2d(192, 384, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (3): None
          )
        )
        (relu): ReLU()
      )
      (2): HighResolutionModule(
        (branches): ModuleList(
          (0): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): BasicBlock(
              (conv1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (2): BasicBlock(
              (conv1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (3): BasicBlock(
              (conv1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): BasicBlock(
              (conv1): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (2): BasicBlock(
              (conv1): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (3): BasicBlock(
              (conv1): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): BasicBlock(
              (conv1): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (2): BasicBlock(
              (conv1): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (3): BasicBlock(
              (conv1): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (3): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): BasicBlock(
              (conv1): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (2): BasicBlock(
              (conv1): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (3): BasicBlock(
              (conv1): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU()
              (relu_in): ReLU(inplace=True)
              (conv2): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (fuse_layers): ModuleList(
          (0): ModuleList(
            (0): None
            (1): Sequential(
              (0): Conv2d(96, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (2): Sequential(
              (0): Conv2d(192, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (3): Sequential(
              (0): Conv2d(384, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): ModuleList(
            (0): Sequential(
              (0): Sequential(
                (0): Conv2d(48, 96, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (1): None
            (2): Sequential(
              (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (3): Sequential(
              (0): Conv2d(384, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): ModuleList(
            (0): Sequential(
              (0): Sequential(
                (0): Conv2d(48, 48, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU()
              )
              (1): Sequential(
                (0): Conv2d(48, 192, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (1): Sequential(
              (0): Sequential(
                (0): Conv2d(96, 192, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (2): None
            (3): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (3): ModuleList(
            (0): Sequential(
              (0): Sequential(
                (0): Conv2d(48, 48, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU()
              )
              (1): Sequential(
                (0): Conv2d(48, 48, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU()
              )
              (2): Sequential(
                (0): Conv2d(48, 384, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (1): Sequential(
              (0): Sequential(
                (0): Conv2d(96, 96, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU()
              )
              (1): Sequential(
                (0): Conv2d(96, 384, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (2): Sequential(
              (0): Sequential(
                (0): Conv2d(192, 384, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (3): None
          )
        )
        (relu): ReLU()
      )
    )
  )
  (proj_head): HRNet_W48(
    (proj_head): ProjectionHead(
      (proj): Sequential(
        (0): Conv2d(720, 720, kernel_size=(1, 1), stride=(1, 1))
        (1): Sequential(
          (0): BatchNorm2d(720, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): ReLU()
        )
        (2): Conv2d(720, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (bipartite_graphs): ParameterList(
        (0): Parameter containing: [torch.float32 of size 19x448 (GPU 0)]
        (1): Parameter containing: [torch.float32 of size 64x448 (GPU 0)]
        (2): Parameter containing: [torch.float32 of size 37x448 (GPU 0)]
        (3): Parameter containing: [torch.float32 of size 19x448 (GPU 0)]
        (4): Parameter containing: [torch.float32 of size 26x448 (GPU 0)]
        (5): Parameter containing: [torch.float32 of size 150x448 (GPU 0)]
        (6): Parameter containing: [torch.float32 of size 133x448 (GPU 0)]
    )
  )
  (criterion): OhemCELoss(
    (criteria): CrossEntropyLoss()
  )
)
[03/05 19:50:28 d2.checkpoint.detection_checkpoint]: [DetectionCheckpointer] Loading from output/model_0014999.pth ...
[03/05 19:50:28 fvcore.common.checkpoint]: [Checkpointer] Loading from output/model_0014999.pth ...
[03/05 19:50:29 mask2former.data.dataset_mappers.semantic_dataset_mapper]: [SemanticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=..., max_size=4096, sample_style='choice'), RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[768, 768], single_category_max_area=1.0, ignored_category=255), <detectron2.projects.point_rend.color_augmentation.ColorAugSSDTransform object at 0x7f2559e28e80>, RandomFlip()]
[03/05 19:50:29 mask2former.data.dataset_mappers.semantic_dataset_mapper]: [SemanticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=..., max_size=4096, sample_style='choice'), RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[768, 768], single_category_max_area=1.0, ignored_category=255), <detectron2.projects.point_rend.color_augmentation.ColorAugSSDTransform object at 0x7f2559e28820>, RandomFlip()]
[03/05 19:50:29 mask2former.data.dataset_mappers.semantic_dataset_mapper]: [SemanticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=..., max_size=4096, sample_style='choice'), RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[768, 768], single_category_max_area=1.0, ignored_category=255), <detectron2.projects.point_rend.color_augmentation.ColorAugSSDTransform object at 0x7f2559e28490>, RandomFlip()]
[03/05 19:50:29 mask2former.data.dataset_mappers.semantic_dataset_mapper]: [SemanticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=..., max_size=4096, sample_style='choice'), RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[768, 768], single_category_max_area=1.0, ignored_category=255), <detectron2.projects.point_rend.color_augmentation.ColorAugSSDTransform object at 0x7f2559e28250>, RandomFlip()]
[03/05 19:50:29 mask2former.data.dataset_mappers.semantic_dataset_mapper]: [SemanticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=..., max_size=4096, sample_style='choice'), RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[768, 768], single_category_max_area=1.0, ignored_category=255), <detectron2.projects.point_rend.color_augmentation.ColorAugSSDTransform object at 0x7f2557b1ee80>, RandomFlip()]
[03/05 19:50:29 mask2former.data.dataset_mappers.semantic_dataset_mapper]: [SemanticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=..., max_size=4096, sample_style='choice'), RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[768, 768], single_category_max_area=1.0, ignored_category=255), <detectron2.projects.point_rend.color_augmentation.ColorAugSSDTransform object at 0x7f2557b1ebe0>, RandomFlip()]
[03/05 19:50:29 mask2former.data.dataset_mappers.semantic_dataset_mapper]: [SemanticDatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=..., max_size=4096, sample_style='choice'), RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[768, 768], single_category_max_area=1.0, ignored_category=255), <detectron2.projects.point_rend.color_augmentation.ColorAugSSDTransform object at 0x7f2557b1e940>, RandomFlip()]
[03/05 19:50:29 mask2former.data.dataloader.DaliDataLoader]: evaluate cs_sem_seg_val
[03/05 19:50:29 d2.data.common]: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[03/05 19:50:29 d2.data.common]: Serializing 500 elements to byte tensors and concatenating them all ...
[03/05 19:50:29 d2.data.common]: Serialized dataset takes 0.16 MiB
[03/05 19:50:29 d2.evaluation.evaluator]: Start inference on 500 batches
[03/05 19:50:34 d2.evaluation.evaluator]: Inference done 11/500. Dataloading: 0.0048 s/iter. Inference: 0.0917 s/iter. Eval: 0.2230 s/iter. Total: 0.3195 s/iter. ETA=0:02:36
[03/05 19:50:39 d2.evaluation.evaluator]: Inference done 27/500. Dataloading: 0.0054 s/iter. Inference: 0.0909 s/iter. Eval: 0.2268 s/iter. Total: 0.3232 s/iter. ETA=0:02:32
[03/05 19:50:45 d2.evaluation.evaluator]: Inference done 44/500. Dataloading: 0.0056 s/iter. Inference: 0.0906 s/iter. Eval: 0.2187 s/iter. Total: 0.3150 s/iter. ETA=0:02:23
[03/05 19:50:50 d2.evaluation.evaluator]: Inference done 61/500. Dataloading: 0.0058 s/iter. Inference: 0.0908 s/iter. Eval: 0.2170 s/iter. Total: 0.3137 s/iter. ETA=0:02:17
[03/05 19:50:55 d2.evaluation.evaluator]: Inference done 78/500. Dataloading: 0.0058 s/iter. Inference: 0.0908 s/iter. Eval: 0.2142 s/iter. Total: 0.3109 s/iter. ETA=0:02:11
[03/05 19:51:00 d2.evaluation.evaluator]: Inference done 95/500. Dataloading: 0.0058 s/iter. Inference: 0.0908 s/iter. Eval: 0.2139 s/iter. Total: 0.3106 s/iter. ETA=0:02:05
[03/05 19:51:05 d2.evaluation.evaluator]: Inference done 112/500. Dataloading: 0.0058 s/iter. Inference: 0.0908 s/iter. Eval: 0.2130 s/iter. Total: 0.3097 s/iter. ETA=0:02:00
[03/05 19:51:11 d2.evaluation.evaluator]: Inference done 128/500. Dataloading: 0.0059 s/iter. Inference: 0.0909 s/iter. Eval: 0.2145 s/iter. Total: 0.3114 s/iter. ETA=0:01:55
[03/05 19:51:16 d2.evaluation.evaluator]: Inference done 144/500. Dataloading: 0.0059 s/iter. Inference: 0.0908 s/iter. Eval: 0.2152 s/iter. Total: 0.3119 s/iter. ETA=0:01:51
[03/05 19:51:21 d2.evaluation.evaluator]: Inference done 161/500. Dataloading: 0.0059 s/iter. Inference: 0.0908 s/iter. Eval: 0.2148 s/iter. Total: 0.3116 s/iter. ETA=0:01:45
[03/05 19:51:26 d2.evaluation.evaluator]: Inference done 177/500. Dataloading: 0.0059 s/iter. Inference: 0.0909 s/iter. Eval: 0.2153 s/iter. Total: 0.3122 s/iter. ETA=0:01:40
[03/05 19:51:31 d2.evaluation.evaluator]: Inference done 193/500. Dataloading: 0.0059 s/iter. Inference: 0.0910 s/iter. Eval: 0.2158 s/iter. Total: 0.3128 s/iter. ETA=0:01:36
[03/05 19:51:36 d2.evaluation.evaluator]: Inference done 209/500. Dataloading: 0.0059 s/iter. Inference: 0.0912 s/iter. Eval: 0.2166 s/iter. Total: 0.3138 s/iter. ETA=0:01:31
[03/05 19:51:41 d2.evaluation.evaluator]: Inference done 225/500. Dataloading: 0.0059 s/iter. Inference: 0.0912 s/iter. Eval: 0.2167 s/iter. Total: 0.3139 s/iter. ETA=0:01:26
[03/05 19:51:46 d2.evaluation.evaluator]: Inference done 242/500. Dataloading: 0.0059 s/iter. Inference: 0.0912 s/iter. Eval: 0.2161 s/iter. Total: 0.3133 s/iter. ETA=0:01:20
[03/05 19:51:51 d2.evaluation.evaluator]: Inference done 258/500. Dataloading: 0.0058 s/iter. Inference: 0.0913 s/iter. Eval: 0.2160 s/iter. Total: 0.3132 s/iter. ETA=0:01:15
[03/05 19:51:57 d2.evaluation.evaluator]: Inference done 275/500. Dataloading: 0.0058 s/iter. Inference: 0.0912 s/iter. Eval: 0.2155 s/iter. Total: 0.3127 s/iter. ETA=0:01:10
[03/05 19:52:02 d2.evaluation.evaluator]: Inference done 292/500. Dataloading: 0.0058 s/iter. Inference: 0.0912 s/iter. Eval: 0.2153 s/iter. Total: 0.3124 s/iter. ETA=0:01:04
[03/05 19:52:07 d2.evaluation.evaluator]: Inference done 309/500. Dataloading: 0.0058 s/iter. Inference: 0.0912 s/iter. Eval: 0.2151 s/iter. Total: 0.3123 s/iter. ETA=0:00:59
[03/05 19:52:12 d2.evaluation.evaluator]: Inference done 325/500. Dataloading: 0.0058 s/iter. Inference: 0.0912 s/iter. Eval: 0.2152 s/iter. Total: 0.3123 s/iter. ETA=0:00:54
[03/05 19:52:17 d2.evaluation.evaluator]: Inference done 341/500. Dataloading: 0.0058 s/iter. Inference: 0.0912 s/iter. Eval: 0.2155 s/iter. Total: 0.3126 s/iter. ETA=0:00:49
[03/05 19:52:22 d2.evaluation.evaluator]: Inference done 357/500. Dataloading: 0.0058 s/iter. Inference: 0.0913 s/iter. Eval: 0.2155 s/iter. Total: 0.3127 s/iter. ETA=0:00:44
[03/05 19:52:28 d2.evaluation.evaluator]: Inference done 374/500. Dataloading: 0.0058 s/iter. Inference: 0.0913 s/iter. Eval: 0.2153 s/iter. Total: 0.3125 s/iter. ETA=0:00:39
[03/05 19:52:33 d2.evaluation.evaluator]: Inference done 391/500. Dataloading: 0.0058 s/iter. Inference: 0.0912 s/iter. Eval: 0.2153 s/iter. Total: 0.3123 s/iter. ETA=0:00:34
[03/05 19:52:38 d2.evaluation.evaluator]: Inference done 408/500. Dataloading: 0.0057 s/iter. Inference: 0.0911 s/iter. Eval: 0.2152 s/iter. Total: 0.3122 s/iter. ETA=0:00:28
[03/05 19:52:43 d2.evaluation.evaluator]: Inference done 425/500. Dataloading: 0.0057 s/iter. Inference: 0.0911 s/iter. Eval: 0.2152 s/iter. Total: 0.3122 s/iter. ETA=0:00:23
[03/05 19:52:48 d2.evaluation.evaluator]: Inference done 441/500. Dataloading: 0.0057 s/iter. Inference: 0.0911 s/iter. Eval: 0.2153 s/iter. Total: 0.3122 s/iter. ETA=0:00:18
[03/05 19:52:54 d2.evaluation.evaluator]: Inference done 457/500. Dataloading: 0.0057 s/iter. Inference: 0.0912 s/iter. Eval: 0.2156 s/iter. Total: 0.3126 s/iter. ETA=0:00:13
[03/05 19:52:59 d2.evaluation.evaluator]: Inference done 473/500. Dataloading: 0.0057 s/iter. Inference: 0.0912 s/iter. Eval: 0.2157 s/iter. Total: 0.3127 s/iter. ETA=0:00:08
[03/05 19:53:04 d2.evaluation.evaluator]: Inference done 489/500. Dataloading: 0.0058 s/iter. Inference: 0.0913 s/iter. Eval: 0.2156 s/iter. Total: 0.3128 s/iter. ETA=0:00:03
[03/05 19:53:07 d2.evaluation.evaluator]: Total inference time: 0:02:34.479999 (0.312081 s / iter per device, on 1 devices)
[03/05 19:53:07 d2.evaluation.evaluator]: Total inference pure compute time: 0:00:45 (0.091098 s / iter per device, on 1 devices)
[03/05 19:53:07 d2.evaluation.sem_seg_evaluation]: OrderedDict([('sem_seg', {'mIoU': 65.16529890844494, 'fwIoU': 90.42880004931503, 'IoU-road': 97.27857404828428, 'BoundaryIoU-road': 87.81698179408332, 'min(IoU, B-Iou)-road': 87.81698179408332, 'IoU-sidewalk': 79.63848307466687, 'BoundaryIoU-sidewalk': 41.352652919799276, 'min(IoU, B-Iou)-sidewalk': 41.352652919799276, 'IoU-building': 90.73028306222459, 'BoundaryIoU-building': 68.12963063572933, 'min(IoU, B-Iou)-building': 68.12963063572933, 'IoU-wall': 48.741742005340214, 'BoundaryIoU-wall': 31.027671583745615, 'min(IoU, B-Iou)-wall': 31.027671583745615, 'IoU-fence': 52.47191273508489, 'BoundaryIoU-fence': 24.901650401603153, 'min(IoU, B-Iou)-fence': 24.901650401603153, 'IoU-pole': 53.855468840279904, 'BoundaryIoU-pole': 38.841765787255895, 'min(IoU, B-Iou)-pole': 38.841765787255895, 'IoU-traffic light': 54.48468466242284, 'BoundaryIoU-traffic light': 60.62998437918773, 'min(IoU, B-Iou)-traffic light': 54.48468466242284, 'IoU-traffic sign': 67.13404166867402, 'BoundaryIoU-traffic sign': 39.96814597262103, 'min(IoU, B-Iou)-traffic sign': 39.96814597262103, 'IoU-vegetation': 91.09182031439663, 'BoundaryIoU-vegetation': 73.99819405661124, 'min(IoU, B-Iou)-vegetation': 73.99819405661124, 'IoU-terrain': 57.36771690428396, 'BoundaryIoU-terrain': 49.0947276335638, 'min(IoU, B-Iou)-terrain': 49.0947276335638, 'IoU-sky': 93.93687835702225, 'BoundaryIoU-sky': 68.96473876451984, 'min(IoU, B-Iou)-sky': 68.96473876451984, 'IoU-person': 73.04123942689694, 'BoundaryIoU-person': 61.5844004318659, 'min(IoU, B-Iou)-person': 61.5844004318659, 'IoU-rider': 41.94629809720427, 'BoundaryIoU-rider': 38.54030783826297, 'min(IoU, B-Iou)-rider': 38.54030783826297, 'IoU-car': 92.99844310491997, 'BoundaryIoU-car': 0.0, 'min(IoU, B-Iou)-car': 0.0, 'IoU-truck': 66.7213119177515, 'BoundaryIoU-truck': 0.0, 'min(IoU, B-Iou)-truck': 0.0, 'IoU-bus': 61.20311021054309, 'BoundaryIoU-bus': 0.0, 'min(IoU, B-Iou)-bus': 0.0, 'IoU-train': 0.0, 'BoundaryIoU-train': 0.0, 'min(IoU, B-Iou)-train': 0.0, 'IoU-motorcycle': 46.67990368129147, 'BoundaryIoU-motorcycle': 0.0, 'min(IoU, B-Iou)-motorcycle': 0.0, 'IoU-bicycle': 68.81876714916613, 'BoundaryIoU-bicycle': 0.0, 'min(IoU, B-Iou)-bicycle': 0.0, 'mACC': 74.5395204070969, 'pACC': 94.71506335304092, 'ACC-road': 98.30719518870421, 'ACC-sidewalk': 89.69697757428352, 'ACC-building': 96.28488856831693, 'ACC-wall': 55.67502103160194, 'ACC-fence': 65.84118341837396, 'ACC-pole': 62.569403647215694, 'ACC-traffic light': 66.0525102616748, 'ACC-traffic sign': 75.3286263751882, 'ACC-vegetation': 95.93954428290107, 'ACC-terrain': 70.28278985540508, 'ACC-sky': 96.83663571225118, 'ACC-person': 88.46559245521935, 'ACC-rider': 50.281029117289165, 'ACC-car': 97.28428711085564, 'ACC-truck': 80.62637240413866, 'ACC-bus': 78.90424683984823, 'ACC-train': 0.0, 'ACC-motorcycle': 64.23640862883269, 'ACC-bicycle': 83.63817526274084})])
[03/05 19:53:07 d2.engine.defaults]: Evaluation results for cs_sem_seg_val in csv format:
[03/05 19:53:07 d2.evaluation.testing]: copypaste: Task: sem_seg
[03/05 19:53:07 d2.evaluation.testing]: copypaste: mIoU,fwIoU,mACC,pACC
[03/05 19:53:07 d2.evaluation.testing]: copypaste: 65.1653,90.4288,74.5395,94.7151
[03/05 19:53:07 mask2former.data.dataset_mappers.semantic_dataset_mapper]: [SemanticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=..., max_size=4096, sample_style='choice'), RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[768, 768], single_category_max_area=1.0, ignored_category=255), <detectron2.projects.point_rend.color_augmentation.ColorAugSSDTransform object at 0x7f2557acf2b0>, RandomFlip()]
[03/05 19:53:07 mask2former.data.dataset_mappers.semantic_dataset_mapper]: [SemanticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=..., max_size=4096, sample_style='choice'), RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[768, 768], single_category_max_area=1.0, ignored_category=255), <detectron2.projects.point_rend.color_augmentation.ColorAugSSDTransform object at 0x7f2557ac7550>, RandomFlip()]
[03/05 19:53:07 mask2former.data.dataset_mappers.semantic_dataset_mapper]: [SemanticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=..., max_size=4096, sample_style='choice'), RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[768, 768], single_category_max_area=1.0, ignored_category=255), <detectron2.projects.point_rend.color_augmentation.ColorAugSSDTransform object at 0x7f2557ac7c40>, RandomFlip()]
[03/05 19:53:07 mask2former.data.dataset_mappers.semantic_dataset_mapper]: [SemanticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=..., max_size=4096, sample_style='choice'), RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[768, 768], single_category_max_area=1.0, ignored_category=255), <detectron2.projects.point_rend.color_augmentation.ColorAugSSDTransform object at 0x7f2557ac79a0>, RandomFlip()]
[03/05 19:53:07 mask2former.data.dataset_mappers.semantic_dataset_mapper]: [SemanticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=..., max_size=4096, sample_style='choice'), RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[768, 768], single_category_max_area=1.0, ignored_category=255), <detectron2.projects.point_rend.color_augmentation.ColorAugSSDTransform object at 0x7f2557ac7670>, RandomFlip()]
[03/05 19:53:07 mask2former.data.dataset_mappers.semantic_dataset_mapper]: [SemanticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=..., max_size=4096, sample_style='choice'), RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[768, 768], single_category_max_area=1.0, ignored_category=255), <detectron2.projects.point_rend.color_augmentation.ColorAugSSDTransform object at 0x7f2557ac0e50>, RandomFlip()]
[03/05 19:53:07 mask2former.data.dataset_mappers.semantic_dataset_mapper]: [SemanticDatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=..., max_size=4096, sample_style='choice'), RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[768, 768], single_category_max_area=1.0, ignored_category=255), <detectron2.projects.point_rend.color_augmentation.ColorAugSSDTransform object at 0x7f2557ac0d90>, RandomFlip()]
[03/05 19:53:07 mask2former.data.dataloader.DaliDataLoader]: evaluate sunrgbd_sem_seg_val
[03/05 19:53:07 d2.data.common]: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[03/05 19:53:07 d2.data.common]: Serializing 5050 elements to byte tensors and concatenating them all ...
[03/05 19:53:07 d2.data.common]: Serialized dataset takes 1.08 MiB
[03/05 19:53:07 d2.evaluation.evaluator]: Start inference on 5050 batches
[03/05 19:53:09 d2.evaluation.evaluator]: Inference done 15/5050. Dataloading: 0.0018 s/iter. Inference: 0.0542 s/iter. Eval: 0.0162 s/iter. Total: 0.0722 s/iter. ETA=0:06:03
[03/05 19:53:14 d2.evaluation.evaluator]: Inference done 90/5050. Dataloading: 0.0020 s/iter. Inference: 0.0499 s/iter. Eval: 0.0156 s/iter. Total: 0.0676 s/iter. ETA=0:05:35
[03/05 19:53:19 d2.evaluation.evaluator]: Inference done 169/5050. Dataloading: 0.0020 s/iter. Inference: 0.0484 s/iter. Eval: 0.0151 s/iter. Total: 0.0657 s/iter. ETA=0:05:20
[03/05 19:53:24 d2.evaluation.evaluator]: Inference done 251/5050. Dataloading: 0.0020 s/iter. Inference: 0.0472 s/iter. Eval: 0.0149 s/iter. Total: 0.0642 s/iter. ETA=0:05:08
[03/05 19:53:29 d2.evaluation.evaluator]: Inference done 335/5050. Dataloading: 0.0020 s/iter. Inference: 0.0462 s/iter. Eval: 0.0148 s/iter. Total: 0.0630 s/iter. ETA=0:04:57
[03/05 19:53:34 d2.evaluation.evaluator]: Inference done 416/5050. Dataloading: 0.0020 s/iter. Inference: 0.0460 s/iter. Eval: 0.0147 s/iter. Total: 0.0628 s/iter. ETA=0:04:51
[03/05 19:53:39 d2.evaluation.evaluator]: Inference done 491/5050. Dataloading: 0.0020 s/iter. Inference: 0.0467 s/iter. Eval: 0.0148 s/iter. Total: 0.0635 s/iter. ETA=0:04:49
[03/05 19:53:44 d2.evaluation.evaluator]: Inference done 568/5050. Dataloading: 0.0020 s/iter. Inference: 0.0469 s/iter. Eval: 0.0147 s/iter. Total: 0.0638 s/iter. ETA=0:04:45
[03/05 19:53:49 d2.evaluation.evaluator]: Inference done 647/5050. Dataloading: 0.0020 s/iter. Inference: 0.0469 s/iter. Eval: 0.0147 s/iter. Total: 0.0637 s/iter. ETA=0:04:40
[03/05 19:53:54 d2.evaluation.evaluator]: Inference done 718/5050. Dataloading: 0.0021 s/iter. Inference: 0.0474 s/iter. Eval: 0.0149 s/iter. Total: 0.0644 s/iter. ETA=0:04:39
[03/05 19:53:59 d2.evaluation.evaluator]: Inference done 790/5050. Dataloading: 0.0021 s/iter. Inference: 0.0479 s/iter. Eval: 0.0149 s/iter. Total: 0.0649 s/iter. ETA=0:04:36
[03/05 19:54:04 d2.evaluation.evaluator]: Inference done 861/5050. Dataloading: 0.0021 s/iter. Inference: 0.0484 s/iter. Eval: 0.0149 s/iter. Total: 0.0654 s/iter. ETA=0:04:34
[03/05 19:54:09 d2.evaluation.evaluator]: Inference done 929/5050. Dataloading: 0.0021 s/iter. Inference: 0.0491 s/iter. Eval: 0.0148 s/iter. Total: 0.0661 s/iter. ETA=0:04:32
[03/05 19:54:14 d2.evaluation.evaluator]: Inference done 1001/5050. Dataloading: 0.0021 s/iter. Inference: 0.0494 s/iter. Eval: 0.0147 s/iter. Total: 0.0663 s/iter. ETA=0:04:28
[03/05 19:54:19 d2.evaluation.evaluator]: Inference done 1074/5050. Dataloading: 0.0021 s/iter. Inference: 0.0496 s/iter. Eval: 0.0147 s/iter. Total: 0.0665 s/iter. ETA=0:04:24
[03/05 19:54:24 d2.evaluation.evaluator]: Inference done 1149/5050. Dataloading: 0.0021 s/iter. Inference: 0.0497 s/iter. Eval: 0.0146 s/iter. Total: 0.0665 s/iter. ETA=0:04:19
[03/05 19:54:29 d2.evaluation.evaluator]: Inference done 1224/5050. Dataloading: 0.0021 s/iter. Inference: 0.0498 s/iter. Eval: 0.0146 s/iter. Total: 0.0666 s/iter. ETA=0:04:14
[03/05 19:54:34 d2.evaluation.evaluator]: Inference done 1301/5050. Dataloading: 0.0021 s/iter. Inference: 0.0498 s/iter. Eval: 0.0146 s/iter. Total: 0.0665 s/iter. ETA=0:04:09
[03/05 19:54:39 d2.evaluation.evaluator]: Inference done 1377/5050. Dataloading: 0.0021 s/iter. Inference: 0.0498 s/iter. Eval: 0.0145 s/iter. Total: 0.0665 s/iter. ETA=0:04:04
[03/05 19:54:44 d2.evaluation.evaluator]: Inference done 1454/5050. Dataloading: 0.0021 s/iter. Inference: 0.0498 s/iter. Eval: 0.0144 s/iter. Total: 0.0664 s/iter. ETA=0:03:58
[03/05 19:54:49 d2.evaluation.evaluator]: Inference done 1535/5050. Dataloading: 0.0021 s/iter. Inference: 0.0497 s/iter. Eval: 0.0144 s/iter. Total: 0.0662 s/iter. ETA=0:03:52
[03/05 19:54:54 d2.evaluation.evaluator]: Inference done 1619/5050. Dataloading: 0.0021 s/iter. Inference: 0.0494 s/iter. Eval: 0.0143 s/iter. Total: 0.0658 s/iter. ETA=0:03:45
[03/05 19:54:59 d2.evaluation.evaluator]: Inference done 1701/5050. Dataloading: 0.0021 s/iter. Inference: 0.0492 s/iter. Eval: 0.0143 s/iter. Total: 0.0656 s/iter. ETA=0:03:39
[03/05 19:55:04 d2.evaluation.evaluator]: Inference done 1778/5050. Dataloading: 0.0021 s/iter. Inference: 0.0493 s/iter. Eval: 0.0142 s/iter. Total: 0.0656 s/iter. ETA=0:03:34
[03/05 19:55:09 d2.evaluation.evaluator]: Inference done 1857/5050. Dataloading: 0.0021 s/iter. Inference: 0.0492 s/iter. Eval: 0.0142 s/iter. Total: 0.0655 s/iter. ETA=0:03:29
[03/05 19:55:14 d2.evaluation.evaluator]: Inference done 1939/5050. Dataloading: 0.0020 s/iter. Inference: 0.0491 s/iter. Eval: 0.0141 s/iter. Total: 0.0654 s/iter. ETA=0:03:23
[03/05 19:55:19 d2.evaluation.evaluator]: Inference done 2019/5050. Dataloading: 0.0020 s/iter. Inference: 0.0491 s/iter. Eval: 0.0141 s/iter. Total: 0.0653 s/iter. ETA=0:03:17
[03/05 19:55:24 d2.evaluation.evaluator]: Inference done 2096/5050. Dataloading: 0.0020 s/iter. Inference: 0.0492 s/iter. Eval: 0.0140 s/iter. Total: 0.0653 s/iter. ETA=0:03:12
[03/05 19:55:29 d2.evaluation.evaluator]: Inference done 2170/5050. Dataloading: 0.0020 s/iter. Inference: 0.0493 s/iter. Eval: 0.0140 s/iter. Total: 0.0654 s/iter. ETA=0:03:08
[03/05 19:55:34 d2.evaluation.evaluator]: Inference done 2256/5050. Dataloading: 0.0020 s/iter. Inference: 0.0490 s/iter. Eval: 0.0140 s/iter. Total: 0.0651 s/iter. ETA=0:03:01
[03/05 19:55:39 d2.evaluation.evaluator]: Inference done 2346/5050. Dataloading: 0.0020 s/iter. Inference: 0.0487 s/iter. Eval: 0.0140 s/iter. Total: 0.0647 s/iter. ETA=0:02:55
[03/05 19:55:44 d2.evaluation.evaluator]: Inference done 2432/5050. Dataloading: 0.0020 s/iter. Inference: 0.0484 s/iter. Eval: 0.0140 s/iter. Total: 0.0645 s/iter. ETA=0:02:48
[03/05 19:55:49 d2.evaluation.evaluator]: Inference done 2515/5050. Dataloading: 0.0020 s/iter. Inference: 0.0483 s/iter. Eval: 0.0140 s/iter. Total: 0.0644 s/iter. ETA=0:02:43
[03/05 19:55:54 d2.evaluation.evaluator]: Inference done 2603/5050. Dataloading: 0.0020 s/iter. Inference: 0.0480 s/iter. Eval: 0.0140 s/iter. Total: 0.0641 s/iter. ETA=0:02:36
[03/05 19:56:00 d2.evaluation.evaluator]: Inference done 2695/5050. Dataloading: 0.0020 s/iter. Inference: 0.0477 s/iter. Eval: 0.0140 s/iter. Total: 0.0638 s/iter. ETA=0:02:30
[03/05 19:56:05 d2.evaluation.evaluator]: Inference done 2782/5050. Dataloading: 0.0020 s/iter. Inference: 0.0475 s/iter. Eval: 0.0140 s/iter. Total: 0.0636 s/iter. ETA=0:02:24
[03/05 19:56:10 d2.evaluation.evaluator]: Inference done 2870/5050. Dataloading: 0.0020 s/iter. Inference: 0.0473 s/iter. Eval: 0.0140 s/iter. Total: 0.0634 s/iter. ETA=0:02:18
[03/05 19:56:15 d2.evaluation.evaluator]: Inference done 2952/5050. Dataloading: 0.0020 s/iter. Inference: 0.0473 s/iter. Eval: 0.0140 s/iter. Total: 0.0634 s/iter. ETA=0:02:12
[03/05 19:56:20 d2.evaluation.evaluator]: Inference done 3041/5050. Dataloading: 0.0020 s/iter. Inference: 0.0471 s/iter. Eval: 0.0140 s/iter. Total: 0.0632 s/iter. ETA=0:02:06
[03/05 19:56:25 d2.evaluation.evaluator]: Inference done 3129/5050. Dataloading: 0.0020 s/iter. Inference: 0.0469 s/iter. Eval: 0.0140 s/iter. Total: 0.0630 s/iter. ETA=0:02:01
[03/05 19:56:30 d2.evaluation.evaluator]: Inference done 3214/5050. Dataloading: 0.0020 s/iter. Inference: 0.0468 s/iter. Eval: 0.0140 s/iter. Total: 0.0629 s/iter. ETA=0:01:55
[03/05 19:56:35 d2.evaluation.evaluator]: Inference done 3300/5050. Dataloading: 0.0020 s/iter. Inference: 0.0467 s/iter. Eval: 0.0140 s/iter. Total: 0.0628 s/iter. ETA=0:01:49
[03/05 19:56:40 d2.evaluation.evaluator]: Inference done 3385/5050. Dataloading: 0.0020 s/iter. Inference: 0.0466 s/iter. Eval: 0.0140 s/iter. Total: 0.0627 s/iter. ETA=0:01:44
[03/05 19:56:45 d2.evaluation.evaluator]: Inference done 3472/5050. Dataloading: 0.0020 s/iter. Inference: 0.0465 s/iter. Eval: 0.0140 s/iter. Total: 0.0626 s/iter. ETA=0:01:38
[03/05 19:56:50 d2.evaluation.evaluator]: Inference done 3564/5050. Dataloading: 0.0020 s/iter. Inference: 0.0463 s/iter. Eval: 0.0140 s/iter. Total: 0.0624 s/iter. ETA=0:01:32
[03/05 19:56:55 d2.evaluation.evaluator]: Inference done 3652/5050. Dataloading: 0.0020 s/iter. Inference: 0.0461 s/iter. Eval: 0.0141 s/iter. Total: 0.0622 s/iter. ETA=0:01:27
[03/05 19:57:00 d2.evaluation.evaluator]: Inference done 3741/5050. Dataloading: 0.0020 s/iter. Inference: 0.0460 s/iter. Eval: 0.0140 s/iter. Total: 0.0621 s/iter. ETA=0:01:21
[03/05 19:57:05 d2.evaluation.evaluator]: Inference done 3825/5050. Dataloading: 0.0020 s/iter. Inference: 0.0459 s/iter. Eval: 0.0141 s/iter. Total: 0.0621 s/iter. ETA=0:01:16
[03/05 19:57:10 d2.evaluation.evaluator]: Inference done 3914/5050. Dataloading: 0.0020 s/iter. Inference: 0.0458 s/iter. Eval: 0.0141 s/iter. Total: 0.0619 s/iter. ETA=0:01:10
[03/05 19:57:15 d2.evaluation.evaluator]: Inference done 4004/5050. Dataloading: 0.0020 s/iter. Inference: 0.0456 s/iter. Eval: 0.0141 s/iter. Total: 0.0618 s/iter. ETA=0:01:04
[03/05 19:57:20 d2.evaluation.evaluator]: Inference done 4088/5050. Dataloading: 0.0020 s/iter. Inference: 0.0456 s/iter. Eval: 0.0141 s/iter. Total: 0.0618 s/iter. ETA=0:00:59
[03/05 19:57:25 d2.evaluation.evaluator]: Inference done 4176/5050. Dataloading: 0.0020 s/iter. Inference: 0.0455 s/iter. Eval: 0.0141 s/iter. Total: 0.0617 s/iter. ETA=0:00:53
[03/05 19:57:30 d2.evaluation.evaluator]: Inference done 4260/5050. Dataloading: 0.0020 s/iter. Inference: 0.0455 s/iter. Eval: 0.0141 s/iter. Total: 0.0616 s/iter. ETA=0:00:48
[03/05 19:57:35 d2.evaluation.evaluator]: Inference done 4343/5050. Dataloading: 0.0020 s/iter. Inference: 0.0455 s/iter. Eval: 0.0141 s/iter. Total: 0.0616 s/iter. ETA=0:00:43
[03/05 19:57:40 d2.evaluation.evaluator]: Inference done 4430/5050. Dataloading: 0.0020 s/iter. Inference: 0.0454 s/iter. Eval: 0.0141 s/iter. Total: 0.0615 s/iter. ETA=0:00:38
[03/05 19:57:45 d2.evaluation.evaluator]: Inference done 4524/5050. Dataloading: 0.0020 s/iter. Inference: 0.0453 s/iter. Eval: 0.0140 s/iter. Total: 0.0614 s/iter. ETA=0:00:32
[03/05 19:57:50 d2.evaluation.evaluator]: Inference done 4612/5050. Dataloading: 0.0020 s/iter. Inference: 0.0452 s/iter. Eval: 0.0140 s/iter. Total: 0.0613 s/iter. ETA=0:00:26
[03/05 19:57:55 d2.evaluation.evaluator]: Inference done 4700/5050. Dataloading: 0.0020 s/iter. Inference: 0.0451 s/iter. Eval: 0.0140 s/iter. Total: 0.0612 s/iter. ETA=0:00:21
[03/05 19:58:00 d2.evaluation.evaluator]: Inference done 4791/5050. Dataloading: 0.0020 s/iter. Inference: 0.0450 s/iter. Eval: 0.0140 s/iter. Total: 0.0611 s/iter. ETA=0:00:15
[03/05 19:58:05 d2.evaluation.evaluator]: Inference done 4872/5050. Dataloading: 0.0020 s/iter. Inference: 0.0450 s/iter. Eval: 0.0140 s/iter. Total: 0.0611 s/iter. ETA=0:00:10
[03/05 19:58:10 d2.evaluation.evaluator]: Inference done 4961/5050. Dataloading: 0.0020 s/iter. Inference: 0.0450 s/iter. Eval: 0.0140 s/iter. Total: 0.0610 s/iter. ETA=0:00:05
[03/05 19:58:15 d2.evaluation.evaluator]: Inference done 5047/5050. Dataloading: 0.0020 s/iter. Inference: 0.0449 s/iter. Eval: 0.0140 s/iter. Total: 0.0610 s/iter. ETA=0:00:00
[03/05 19:58:15 d2.evaluation.evaluator]: Total inference time: 0:05:07.572711 (0.060966 s / iter per device, on 1 devices)
[03/05 19:58:15 d2.evaluation.evaluator]: Total inference pure compute time: 0:03:46 (0.044908 s / iter per device, on 1 devices)
[03/05 19:58:16 d2.evaluation.sem_seg_evaluation]: OrderedDict([('sem_seg', {'mIoU': 24.221949585703637, 'fwIoU': 58.291183538663105, 'IoU-bag': 3.2393017060115605, 'BoundaryIoU-bag': 75.7963680308894, 'min(IoU, B-Iou)-bag': 3.2393017060115605, 'IoU-wall': 71.80139435640662, 'BoundaryIoU-wall': 37.585585584308575, 'min(IoU, B-Iou)-wall': 37.585585584308575, 'IoU-floor': 83.92953854323946, 'BoundaryIoU-floor': 35.68262700978641, 'min(IoU, B-Iou)-floor': 35.68262700978641, 'IoU-cabinet': 32.334719331343905, 'BoundaryIoU-cabinet': 19.277506070313233, 'min(IoU, B-Iou)-cabinet': 19.277506070313233, 'IoU-bed': 56.613422824166115, 'BoundaryIoU-bed': 14.400048782631817, 'min(IoU, B-Iou)-bed': 14.400048782631817, 'IoU-chair': 63.23638894277589, 'BoundaryIoU-chair': 17.86534026183384, 'min(IoU, B-Iou)-chair': 17.86534026183384, 'IoU-sofa': 40.326581058898945, 'BoundaryIoU-sofa': 11.815119055073858, 'min(IoU, B-Iou)-sofa': 11.815119055073858, 'IoU-table': 45.988263049870085, 'BoundaryIoU-table': 0.0, 'min(IoU, B-Iou)-table': 0.0, 'IoU-door': 28.20014303351223, 'BoundaryIoU-door': 0.0, 'min(IoU, B-Iou)-door': 0.0, 'IoU-window': 42.07224044368505, 'BoundaryIoU-window': 0.0, 'min(IoU, B-Iou)-window': 0.0, 'IoU-bookshelf': 36.63820451114246, 'BoundaryIoU-bookshelf': 0.0, 'min(IoU, B-Iou)-bookshelf': 0.0, 'IoU-picture': 29.788712110404504, 'BoundaryIoU-picture': 0.0, 'min(IoU, B-Iou)-picture': 0.0, 'IoU-counter': 22.761731299620983, 'BoundaryIoU-counter': 0.0, 'min(IoU, B-Iou)-counter': 0.0, 'IoU-blinds': 2.280524763441282, 'BoundaryIoU-blinds': 0.0, 'min(IoU, B-Iou)-blinds': 0.0, 'IoU-desk': 0.20305970551523683, 'BoundaryIoU-desk': 0.0, 'min(IoU, B-Iou)-desk': 0.0, 'IoU-shelves': 0.1424426769659468, 'BoundaryIoU-shelves': 0.0, 'min(IoU, B-Iou)-shelves': 0.0, 'IoU-curtain': 46.060631642748376, 'BoundaryIoU-curtain': 0.0, 'min(IoU, B-Iou)-curtain': 0.0, 'IoU-dresser': 0.5545267291467424, 'BoundaryIoU-dresser': 0.0, 'min(IoU, B-Iou)-dresser': 0.0, 'IoU-pillow': 25.514818171585123, 'BoundaryIoU-pillow': 0.0, 'min(IoU, B-Iou)-pillow': 0.0, 'IoU-mirror': 0.010986975118206642, 'BoundaryIoU-mirror': 0.0, 'min(IoU, B-Iou)-mirror': 0.0, 'IoU-floor mat': 0.0, 'BoundaryIoU-floor mat': 0.0, 'min(IoU, B-Iou)-floor mat': 0.0, 'IoU-clothes': 12.537046477054542, 'BoundaryIoU-clothes': 0.0, 'min(IoU, B-Iou)-clothes': 0.0, 'IoU-ceiling': 51.13443100260153, 'BoundaryIoU-ceiling': 0.0, 'min(IoU, B-Iou)-ceiling': 0.0, 'IoU-books': 13.311015025927015, 'BoundaryIoU-books': 0.0, 'min(IoU, B-Iou)-books': 0.0, 'IoU-refridgerator': 0.0, 'BoundaryIoU-refridgerator': 0.0, 'min(IoU, B-Iou)-refridgerator': 0.0, 'IoU-television': 19.25214523835313, 'BoundaryIoU-television': 0.0, 'min(IoU, B-Iou)-television': 0.0, 'IoU-paper': 8.701132201834476, 'BoundaryIoU-paper': 0.0, 'min(IoU, B-Iou)-paper': 0.0, 'IoU-towel': 0.10101117987124741, 'BoundaryIoU-towel': 0.0, 'min(IoU, B-Iou)-towel': 0.0, 'IoU-shower curtain': 0.007080443493233349, 'BoundaryIoU-shower curtain': 0.0, 'min(IoU, B-Iou)-shower curtain': 0.0, 'IoU-box': 10.364850161724997, 'BoundaryIoU-box': 0.0, 'min(IoU, B-Iou)-box': 0.0, 'IoU-whiteboard': 0.4173240607636635, 'BoundaryIoU-whiteboard': 0.0, 'min(IoU, B-Iou)-whiteboard': 0.0, 'IoU-person': 34.406856862881305, 'BoundaryIoU-person': 0.0, 'min(IoU, B-Iou)-person': 0.0, 'IoU-night stand': 0.0, 'BoundaryIoU-night stand': 0.0, 'min(IoU, B-Iou)-night stand': 0.0, 'IoU-toilet': 58.50236592928676, 'BoundaryIoU-toilet': 0.0, 'min(IoU, B-Iou)-toilet': 0.0, 'IoU-sink': 34.44031030215016, 'BoundaryIoU-sink': 0.0, 'min(IoU, B-Iou)-sink': 0.0, 'IoU-lamp': 19.723645289909022, 'BoundaryIoU-lamp': 0.0, 'min(IoU, B-Iou)-lamp': 0.0, 'IoU-bathtub': 1.615288619584644, 'BoundaryIoU-bathtub': 0.0, 'min(IoU, B-Iou)-bathtub': 0.0, 'mACC': 33.61688003435804, 'pACC': 72.51390258280676, 'ACC-bag': 3.437370311962721, 'ACC-wall': 87.87687384662367, 'ACC-floor': 90.48092115243884, 'ACC-cabinet': 63.09681766943377, 'ACC-bed': 73.93751931702764, 'ACC-chair': 82.51538351453699, 'ACC-sofa': 49.73063915637179, 'ACC-table': 75.7882694225127, 'ACC-door': 40.65429199380369, 'ACC-window': 58.36577810815267, 'ACC-bookshelf': 62.95907245249063, 'ACC-picture': 47.16087385782265, 'ACC-counter': 36.73477594244783, 'ACC-blinds': 2.3120300236456317, 'ACC-desk': 0.20511680285565018, 'ACC-shelves': 0.14437693689812345, 'ACC-curtain': 69.31361860886857, 'ACC-dresser': 0.5564693924023901, 'ACC-pillow': 39.407181411722966, 'ACC-mirror': 0.010995761311365457, 'ACC-floor mat': 0.0, 'ACC-clothes': 15.454597206621957, 'ACC-ceiling': 75.85287708659475, 'ACC-books': 16.330324925311086, 'ACC-refridgerator': 0.0, 'ACC-television': 20.84871233448024, 'ACC-paper': 10.374888236743713, 'ACC-towel': 0.3420779511397133, 'ACC-shower curtain': 0.0072599234078080475, 'ACC-box': 12.337568064344731, 'ACC-whiteboard': 0.41819814219576873, 'ACC-person': 52.47209692366663, 'ACC-night stand': 0.0, 'ACC-toilet': 71.20024165922455, 'ACC-sink': 60.869252087460055, 'ACC-lamp': 21.004792647549866, 'ACC-bathtub': 1.6232983991761194})])
[03/05 19:58:16 d2.engine.defaults]: Evaluation results for sunrgbd_sem_seg_val in csv format:
[03/05 19:58:16 d2.evaluation.testing]: copypaste: Task: sem_seg
[03/05 19:58:16 d2.evaluation.testing]: copypaste: mIoU,fwIoU,mACC,pACC
[03/05 19:58:16 d2.evaluation.testing]: copypaste: 24.2219,58.2912,33.6169,72.5139
[03/05 19:58:16 mask2former.data.dataset_mappers.semantic_dataset_mapper]: [SemanticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=..., max_size=4096, sample_style='choice'), RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[768, 768], single_category_max_area=1.0, ignored_category=255), <detectron2.projects.point_rend.color_augmentation.ColorAugSSDTransform object at 0x7f2557af87f0>, RandomFlip()]
[03/05 19:58:16 mask2former.data.dataset_mappers.semantic_dataset_mapper]: [SemanticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=..., max_size=4096, sample_style='choice'), RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[768, 768], single_category_max_area=1.0, ignored_category=255), <detectron2.projects.point_rend.color_augmentation.ColorAugSSDTransform object at 0x7f2557b16250>, RandomFlip()]
[03/05 19:58:16 mask2former.data.dataset_mappers.semantic_dataset_mapper]: [SemanticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=..., max_size=4096, sample_style='choice'), RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[768, 768], single_category_max_area=1.0, ignored_category=255), <detectron2.projects.point_rend.color_augmentation.ColorAugSSDTransform object at 0x7f2557b16d30>, RandomFlip()]
[03/05 19:58:16 mask2former.data.dataset_mappers.semantic_dataset_mapper]: [SemanticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=..., max_size=4096, sample_style='choice'), RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[768, 768], single_category_max_area=1.0, ignored_category=255), <detectron2.projects.point_rend.color_augmentation.ColorAugSSDTransform object at 0x7f2557b1ec10>, RandomFlip()]
[03/05 19:58:16 mask2former.data.dataset_mappers.semantic_dataset_mapper]: [SemanticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=..., max_size=4096, sample_style='choice'), RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[768, 768], single_category_max_area=1.0, ignored_category=255), <detectron2.projects.point_rend.color_augmentation.ColorAugSSDTransform object at 0x7f2557b1ecd0>, RandomFlip()]
[03/05 19:58:16 mask2former.data.dataset_mappers.semantic_dataset_mapper]: [SemanticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=..., max_size=4096, sample_style='choice'), RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[768, 768], single_category_max_area=1.0, ignored_category=255), <detectron2.projects.point_rend.color_augmentation.ColorAugSSDTransform object at 0x7f2557b1e730>, RandomFlip()]
[03/05 19:58:16 mask2former.data.dataset_mappers.semantic_dataset_mapper]: [SemanticDatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=..., max_size=4096, sample_style='choice'), RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[768, 768], single_category_max_area=1.0, ignored_category=255), <detectron2.projects.point_rend.color_augmentation.ColorAugSSDTransform object at 0x7f2557b0f730>, RandomFlip()]
[03/05 19:58:16 mask2former.data.dataloader.DaliDataLoader]: evaluate bdd_sem_seg_val
[03/05 19:58:16 d2.data.common]: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[03/05 19:58:16 d2.data.common]: Serializing 1000 elements to byte tensors and concatenating them all ...
[03/05 19:58:16 d2.data.common]: Serialized dataset takes 0.25 MiB
[03/05 19:58:16 d2.evaluation.evaluator]: Start inference on 1000 batches
[03/05 19:58:20 d2.evaluation.evaluator]: Inference done 40/1000. Dataloading: 0.0032 s/iter. Inference: 0.0425 s/iter. Eval: 0.0512 s/iter. Total: 0.0970 s/iter. ETA=0:01:33
[03/05 19:58:25 d2.evaluation.evaluator]: Inference done 92/1000. Dataloading: 0.0033 s/iter. Inference: 0.0423 s/iter. Eval: 0.0511 s/iter. Total: 0.0967 s/iter. ETA=0:01:27
[03/05 19:58:31 d2.evaluation.evaluator]: Inference done 145/1000. Dataloading: 0.0033 s/iter. Inference: 0.0424 s/iter. Eval: 0.0507 s/iter. Total: 0.0965 s/iter. ETA=0:01:22
[03/05 19:58:36 d2.evaluation.evaluator]: Inference done 197/1000. Dataloading: 0.0032 s/iter. Inference: 0.0424 s/iter. Eval: 0.0508 s/iter. Total: 0.0965 s/iter. ETA=0:01:17
[03/05 19:58:41 d2.evaluation.evaluator]: Inference done 248/1000. Dataloading: 0.0032 s/iter. Inference: 0.0427 s/iter. Eval: 0.0511 s/iter. Total: 0.0971 s/iter. ETA=0:01:13
[03/05 19:58:46 d2.evaluation.evaluator]: Inference done 299/1000. Dataloading: 0.0032 s/iter. Inference: 0.0428 s/iter. Eval: 0.0512 s/iter. Total: 0.0973 s/iter. ETA=0:01:08
[03/05 19:58:51 d2.evaluation.evaluator]: Inference done 352/1000. Dataloading: 0.0033 s/iter. Inference: 0.0428 s/iter. Eval: 0.0510 s/iter. Total: 0.0971 s/iter. ETA=0:01:02
[03/05 19:58:56 d2.evaluation.evaluator]: Inference done 404/1000. Dataloading: 0.0032 s/iter. Inference: 0.0428 s/iter. Eval: 0.0510 s/iter. Total: 0.0971 s/iter. ETA=0:00:57
[03/05 19:59:01 d2.evaluation.evaluator]: Inference done 455/1000. Dataloading: 0.0032 s/iter. Inference: 0.0431 s/iter. Eval: 0.0510 s/iter. Total: 0.0975 s/iter. ETA=0:00:53
[03/05 19:59:06 d2.evaluation.evaluator]: Inference done 507/1000. Dataloading: 0.0032 s/iter. Inference: 0.0431 s/iter. Eval: 0.0510 s/iter. Total: 0.0974 s/iter. ETA=0:00:48
[03/05 19:59:11 d2.evaluation.evaluator]: Inference done 560/1000. Dataloading: 0.0032 s/iter. Inference: 0.0431 s/iter. Eval: 0.0508 s/iter. Total: 0.0971 s/iter. ETA=0:00:42
[03/05 19:59:16 d2.evaluation.evaluator]: Inference done 611/1000. Dataloading: 0.0032 s/iter. Inference: 0.0431 s/iter. Eval: 0.0509 s/iter. Total: 0.0973 s/iter. ETA=0:00:37
[03/05 19:59:21 d2.evaluation.evaluator]: Inference done 664/1000. Dataloading: 0.0032 s/iter. Inference: 0.0430 s/iter. Eval: 0.0508 s/iter. Total: 0.0971 s/iter. ETA=0:00:32
[03/05 19:59:26 d2.evaluation.evaluator]: Inference done 718/1000. Dataloading: 0.0032 s/iter. Inference: 0.0429 s/iter. Eval: 0.0507 s/iter. Total: 0.0969 s/iter. ETA=0:00:27
[03/05 19:59:31 d2.evaluation.evaluator]: Inference done 772/1000. Dataloading: 0.0032 s/iter. Inference: 0.0428 s/iter. Eval: 0.0506 s/iter. Total: 0.0967 s/iter. ETA=0:00:22
[03/05 19:59:36 d2.evaluation.evaluator]: Inference done 826/1000. Dataloading: 0.0032 s/iter. Inference: 0.0428 s/iter. Eval: 0.0503 s/iter. Total: 0.0964 s/iter. ETA=0:00:16
[03/05 19:59:41 d2.evaluation.evaluator]: Inference done 878/1000. Dataloading: 0.0034 s/iter. Inference: 0.0428 s/iter. Eval: 0.0502 s/iter. Total: 0.0965 s/iter. ETA=0:00:11
[03/05 19:59:46 d2.evaluation.evaluator]: Inference done 929/1000. Dataloading: 0.0034 s/iter. Inference: 0.0430 s/iter. Eval: 0.0502 s/iter. Total: 0.0967 s/iter. ETA=0:00:06
[03/05 19:59:51 d2.evaluation.evaluator]: Inference done 980/1000. Dataloading: 0.0034 s/iter. Inference: 0.0431 s/iter. Eval: 0.0503 s/iter. Total: 0.0968 s/iter. ETA=0:00:01
[03/05 19:59:53 d2.evaluation.evaluator]: Total inference time: 0:01:36.175268 (0.096659 s / iter per device, on 1 devices)
[03/05 19:59:53 d2.evaluation.evaluator]: Total inference pure compute time: 0:00:42 (0.043042 s / iter per device, on 1 devices)
[03/05 19:59:53 d2.evaluation.sem_seg_evaluation]: OrderedDict([('sem_seg', {'mIoU': 55.6490312187119, 'fwIoU': 86.44987399900033, 'IoU-road': 93.88098516220344, 'BoundaryIoU-road': 83.387289050821, 'min(IoU, B-Iou)-road': 83.387289050821, 'IoU-sidewalk': 57.93965911769385, 'BoundaryIoU-sidewalk': 22.393242002107343, 'min(IoU, B-Iou)-sidewalk': 22.393242002107343, 'IoU-building': 83.5788239225996, 'BoundaryIoU-building': 62.18363789338757, 'min(IoU, B-Iou)-building': 62.18363789338757, 'IoU-wall': 31.08698493082856, 'BoundaryIoU-wall': 20.743205806169378, 'min(IoU, B-Iou)-wall': 20.743205806169378, 'IoU-fence': 44.9281223264334, 'BoundaryIoU-fence': 10.431522965502154, 'min(IoU, B-Iou)-fence': 10.431522965502154, 'IoU-pole': 42.86248732525178, 'BoundaryIoU-pole': 42.79706522993341, 'min(IoU, B-Iou)-pole': 42.79706522993341, 'IoU-traffic light': 42.7637257312612, 'BoundaryIoU-traffic light': 47.235528583909684, 'min(IoU, B-Iou)-traffic light': 42.7637257312612, 'IoU-traffic sign': 44.15582168885038, 'BoundaryIoU-traffic sign': 19.728559765873495, 'min(IoU, B-Iou)-traffic sign': 19.728559765873495, 'IoU-vegetation': 85.5561399006125, 'BoundaryIoU-vegetation': 62.333113484288575, 'min(IoU, B-Iou)-vegetation': 62.333113484288575, 'IoU-terrain': 44.10697595697356, 'BoundaryIoU-terrain': 22.957071398994547, 'min(IoU, B-Iou)-terrain': 22.957071398994547, 'IoU-sky': 95.2504594057793, 'BoundaryIoU-sky': 88.27171203725806, 'min(IoU, B-Iou)-sky': 88.27171203725806, 'IoU-person': 61.87173553220758, 'BoundaryIoU-person': 47.055280729340474, 'min(IoU, B-Iou)-person': 47.055280729340474, 'IoU-rider': 39.37523640825514, 'BoundaryIoU-rider': 18.463318688601696, 'min(IoU, B-Iou)-rider': 18.463318688601696, 'IoU-car': 87.79570483758012, 'BoundaryIoU-car': 0.0, 'min(IoU, B-Iou)-car': 0.0, 'IoU-truck': 44.8201346583796, 'BoundaryIoU-truck': 0.0, 'min(IoU, B-Iou)-truck': 0.0, 'IoU-bus': 65.18688930328396, 'BoundaryIoU-bus': 0.0, 'min(IoU, B-Iou)-bus': 0.0, 'IoU-train': 0.0, 'BoundaryIoU-train': 0.0, 'min(IoU, B-Iou)-train': 0.0, 'IoU-motorcycle': 46.23339973439575, 'BoundaryIoU-motorcycle': 0.0, 'min(IoU, B-Iou)-motorcycle': 0.0, 'IoU-bicycle': 45.93830721293626, 'BoundaryIoU-bicycle': 0.0, 'min(IoU, B-Iou)-bicycle': 0.0, 'mACC': 64.13404764484052, 'pACC': 92.34994887419697, 'ACC-road': 97.71333046730165, 'ACC-sidewalk': 68.28344804667945, 'ACC-building': 92.15943127823058, 'ACC-wall': 47.39210961608173, 'ACC-fence': 61.031289232840656, 'ACC-pole': 50.477492950077085, 'ACC-traffic light': 54.65720642174253, 'ACC-traffic sign': 57.67495679657743, 'ACC-vegetation': 92.94488413485236, 'ACC-terrain': 55.163728619815636, 'ACC-sky': 97.39546056989678, 'ACC-person': 71.46835393953974, 'ACC-rider': 46.88976291446024, 'ACC-car': 95.27165176133663, 'ACC-truck': 55.94310709886645, 'ACC-bus': 68.60987692326806, 'ACC-train': 0.0, 'ACC-motorcycle': 50.99491442408485, 'ACC-bicycle': 54.475900056317904})])
[03/05 19:59:53 d2.engine.defaults]: Evaluation results for bdd_sem_seg_val in csv format:
[03/05 19:59:53 d2.evaluation.testing]: copypaste: Task: sem_seg
[03/05 19:59:53 d2.evaluation.testing]: copypaste: mIoU,fwIoU,mACC,pACC
[03/05 19:59:53 d2.evaluation.testing]: copypaste: 55.6490,86.4499,64.1340,92.3499
[03/05 19:59:53 mask2former.data.dataset_mappers.semantic_dataset_mapper]: [SemanticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=..., max_size=4096, sample_style='choice'), RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[768, 768], single_category_max_area=1.0, ignored_category=255), <detectron2.projects.point_rend.color_augmentation.ColorAugSSDTransform object at 0x7f2557ad3160>, RandomFlip()]
[03/05 19:59:53 mask2former.data.dataset_mappers.semantic_dataset_mapper]: [SemanticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=..., max_size=4096, sample_style='choice'), RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[768, 768], single_category_max_area=1.0, ignored_category=255), <detectron2.projects.point_rend.color_augmentation.ColorAugSSDTransform object at 0x7f2557ad38e0>, RandomFlip()]
[03/05 19:59:53 mask2former.data.dataset_mappers.semantic_dataset_mapper]: [SemanticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=..., max_size=4096, sample_style='choice'), RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[768, 768], single_category_max_area=1.0, ignored_category=255), <detectron2.projects.point_rend.color_augmentation.ColorAugSSDTransform object at 0x7f2557ad3d00>, RandomFlip()]
[03/05 19:59:53 mask2former.data.dataset_mappers.semantic_dataset_mapper]: [SemanticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=..., max_size=4096, sample_style='choice'), RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[768, 768], single_category_max_area=1.0, ignored_category=255), <detectron2.projects.point_rend.color_augmentation.ColorAugSSDTransform object at 0x7f2557ad30d0>, RandomFlip()]
[03/05 19:59:53 mask2former.data.dataset_mappers.semantic_dataset_mapper]: [SemanticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=..., max_size=4096, sample_style='choice'), RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[768, 768], single_category_max_area=1.0, ignored_category=255), <detectron2.projects.point_rend.color_augmentation.ColorAugSSDTransform object at 0x7f2557ad33d0>, RandomFlip()]
[03/05 19:59:53 mask2former.data.dataset_mappers.semantic_dataset_mapper]: [SemanticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=..., max_size=4096, sample_style='choice'), RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[768, 768], single_category_max_area=1.0, ignored_category=255), <detectron2.projects.point_rend.color_augmentation.ColorAugSSDTransform object at 0x7f2557ad3640>, RandomFlip()]
[03/05 19:59:53 mask2former.data.dataset_mappers.semantic_dataset_mapper]: [SemanticDatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=..., max_size=4096, sample_style='choice'), RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[768, 768], single_category_max_area=1.0, ignored_category=255), <detectron2.projects.point_rend.color_augmentation.ColorAugSSDTransform object at 0x7f2557adafa0>, RandomFlip()]
[03/05 19:59:53 mask2former.data.dataloader.DaliDataLoader]: evaluate idd_sem_seg_val
[03/05 19:59:53 d2.data.common]: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[03/05 19:59:53 d2.data.common]: Serializing 981 elements to byte tensors and concatenating them all ...
[03/05 19:59:53 d2.data.common]: Serialized dataset takes 0.23 MiB
[03/05 19:59:53 d2.evaluation.evaluator]: Start inference on 981 batches
[03/05 19:59:57 d2.evaluation.evaluator]: Inference done 11/981. Dataloading: 0.0046 s/iter. Inference: 0.0934 s/iter. Eval: 0.1530 s/iter. Total: 0.2510 s/iter. ETA=0:04:03
[03/05 20:00:02 d2.evaluation.evaluator]: Inference done 30/981. Dataloading: 0.0055 s/iter. Inference: 0.0919 s/iter. Eval: 0.1690 s/iter. Total: 0.2665 s/iter. ETA=0:04:13
[03/05 20:00:07 d2.evaluation.evaluator]: Inference done 50/981. Dataloading: 0.0054 s/iter. Inference: 0.0912 s/iter. Eval: 0.1675 s/iter. Total: 0.2643 s/iter. ETA=0:04:06
[03/05 20:00:12 d2.evaluation.evaluator]: Inference done 69/981. Dataloading: 0.0054 s/iter. Inference: 0.0912 s/iter. Eval: 0.1686 s/iter. Total: 0.2654 s/iter. ETA=0:04:02
[03/05 20:00:17 d2.evaluation.evaluator]: Inference done 88/981. Dataloading: 0.0056 s/iter. Inference: 0.0912 s/iter. Eval: 0.1699 s/iter. Total: 0.2668 s/iter. ETA=0:03:58
[03/05 20:00:23 d2.evaluation.evaluator]: Inference done 107/981. Dataloading: 0.0056 s/iter. Inference: 0.0911 s/iter. Eval: 0.1705 s/iter. Total: 0.2673 s/iter. ETA=0:03:53
[03/05 20:00:28 d2.evaluation.evaluator]: Inference done 127/981. Dataloading: 0.0056 s/iter. Inference: 0.0909 s/iter. Eval: 0.1680 s/iter. Total: 0.2646 s/iter. ETA=0:03:45
[03/05 20:00:33 d2.evaluation.evaluator]: Inference done 146/981. Dataloading: 0.0058 s/iter. Inference: 0.0906 s/iter. Eval: 0.1686 s/iter. Total: 0.2650 s/iter. ETA=0:03:41
[03/05 20:00:38 d2.evaluation.evaluator]: Inference done 165/981. Dataloading: 0.0058 s/iter. Inference: 0.0904 s/iter. Eval: 0.1698 s/iter. Total: 0.2662 s/iter. ETA=0:03:37
[03/05 20:00:43 d2.evaluation.evaluator]: Inference done 200/981. Dataloading: 0.0055 s/iter. Inference: 0.0842 s/iter. Eval: 0.1546 s/iter. Total: 0.2444 s/iter. ETA=0:03:10
[03/05 20:00:48 d2.evaluation.evaluator]: Inference done 241/981. Dataloading: 0.0051 s/iter. Inference: 0.0779 s/iter. Eval: 0.1402 s/iter. Total: 0.2232 s/iter. ETA=0:02:45
[03/05 20:00:53 d2.evaluation.evaluator]: Inference done 278/981. Dataloading: 0.0049 s/iter. Inference: 0.0749 s/iter. Eval: 0.1322 s/iter. Total: 0.2122 s/iter. ETA=0:02:29
[03/05 20:00:58 d2.evaluation.evaluator]: Inference done 298/981. Dataloading: 0.0050 s/iter. Inference: 0.0760 s/iter. Eval: 0.1340 s/iter. Total: 0.2150 s/iter. ETA=0:02:26
[03/05 20:01:03 d2.evaluation.evaluator]: Inference done 319/981. Dataloading: 0.0050 s/iter. Inference: 0.0769 s/iter. Eval: 0.1347 s/iter. Total: 0.2167 s/iter. ETA=0:02:23
[03/05 20:01:09 d2.evaluation.evaluator]: Inference done 340/981. Dataloading: 0.0050 s/iter. Inference: 0.0779 s/iter. Eval: 0.1354 s/iter. Total: 0.2184 s/iter. ETA=0:02:20
[03/05 20:01:14 d2.evaluation.evaluator]: Inference done 362/981. Dataloading: 0.0050 s/iter. Inference: 0.0783 s/iter. Eval: 0.1358 s/iter. Total: 0.2192 s/iter. ETA=0:02:15
[03/05 20:01:19 d2.evaluation.evaluator]: Inference done 407/981. Dataloading: 0.0048 s/iter. Inference: 0.0748 s/iter. Eval: 0.1275 s/iter. Total: 0.2072 s/iter. ETA=0:01:58
[03/05 20:01:24 d2.evaluation.evaluator]: Inference done 452/981. Dataloading: 0.0047 s/iter. Inference: 0.0719 s/iter. Eval: 0.1209 s/iter. Total: 0.1975 s/iter. ETA=0:01:44
[03/05 20:01:29 d2.evaluation.evaluator]: Inference done 496/981. Dataloading: 0.0046 s/iter. Inference: 0.0698 s/iter. Eval: 0.1157 s/iter. Total: 0.1902 s/iter. ETA=0:01:32
[03/05 20:01:34 d2.evaluation.evaluator]: Inference done 528/981. Dataloading: 0.0045 s/iter. Inference: 0.0691 s/iter. Eval: 0.1146 s/iter. Total: 0.1883 s/iter. ETA=0:01:25
[03/05 20:01:39 d2.evaluation.evaluator]: Inference done 548/981. Dataloading: 0.0046 s/iter. Inference: 0.0700 s/iter. Eval: 0.1160 s/iter. Total: 0.1906 s/iter. ETA=0:01:22
[03/05 20:01:44 d2.evaluation.evaluator]: Inference done 568/981. Dataloading: 0.0046 s/iter. Inference: 0.0707 s/iter. Eval: 0.1176 s/iter. Total: 0.1930 s/iter. ETA=0:01:19
[03/05 20:01:49 d2.evaluation.evaluator]: Inference done 588/981. Dataloading: 0.0046 s/iter. Inference: 0.0714 s/iter. Eval: 0.1190 s/iter. Total: 0.1951 s/iter. ETA=0:01:16
[03/05 20:01:54 d2.evaluation.evaluator]: Inference done 608/981. Dataloading: 0.0047 s/iter. Inference: 0.0720 s/iter. Eval: 0.1205 s/iter. Total: 0.1972 s/iter. ETA=0:01:13
[03/05 20:01:59 d2.evaluation.evaluator]: Inference done 627/981. Dataloading: 0.0047 s/iter. Inference: 0.0726 s/iter. Eval: 0.1221 s/iter. Total: 0.1994 s/iter. ETA=0:01:10
[03/05 20:02:04 d2.evaluation.evaluator]: Inference done 669/981. Dataloading: 0.0046 s/iter. Inference: 0.0712 s/iter. Eval: 0.1186 s/iter. Total: 0.1945 s/iter. ETA=0:01:00
[03/05 20:02:10 d2.evaluation.evaluator]: Inference done 713/981. Dataloading: 0.0045 s/iter. Inference: 0.0697 s/iter. Eval: 0.1153 s/iter. Total: 0.1897 s/iter. ETA=0:00:50
[03/05 20:02:15 d2.evaluation.evaluator]: Inference done 732/981. Dataloading: 0.0046 s/iter. Inference: 0.0702 s/iter. Eval: 0.1169 s/iter. Total: 0.1918 s/iter. ETA=0:00:47
[03/05 20:02:20 d2.evaluation.evaluator]: Inference done 773/981. Dataloading: 0.0045 s/iter. Inference: 0.0692 s/iter. Eval: 0.1146 s/iter. Total: 0.1884 s/iter. ETA=0:00:39
[03/05 20:02:25 d2.evaluation.evaluator]: Inference done 791/981. Dataloading: 0.0046 s/iter. Inference: 0.0697 s/iter. Eval: 0.1161 s/iter. Total: 0.1905 s/iter. ETA=0:00:36
[03/05 20:02:30 d2.evaluation.evaluator]: Inference done 810/981. Dataloading: 0.0046 s/iter. Inference: 0.0702 s/iter. Eval: 0.1174 s/iter. Total: 0.1924 s/iter. ETA=0:00:32
[03/05 20:02:35 d2.evaluation.evaluator]: Inference done 830/981. Dataloading: 0.0046 s/iter. Inference: 0.0708 s/iter. Eval: 0.1186 s/iter. Total: 0.1941 s/iter. ETA=0:00:29
[03/05 20:02:40 d2.evaluation.evaluator]: Inference done 863/981. Dataloading: 0.0046 s/iter. Inference: 0.0703 s/iter. Eval: 0.1175 s/iter. Total: 0.1924 s/iter. ETA=0:00:22
[03/05 20:02:45 d2.evaluation.evaluator]: Inference done 906/981. Dataloading: 0.0045 s/iter. Inference: 0.0692 s/iter. Eval: 0.1150 s/iter. Total: 0.1888 s/iter. ETA=0:00:14
[03/05 20:02:51 d2.evaluation.evaluator]: Inference done 950/981. Dataloading: 0.0045 s/iter. Inference: 0.0683 s/iter. Eval: 0.1126 s/iter. Total: 0.1854 s/iter. ETA=0:00:05
[03/05 20:02:56 d2.evaluation.evaluator]: Inference done 972/981. Dataloading: 0.0045 s/iter. Inference: 0.0685 s/iter. Eval: 0.1135 s/iter. Total: 0.1866 s/iter. ETA=0:00:01
[03/05 20:02:58 d2.evaluation.evaluator]: Total inference time: 0:03:02.479644 (0.186967 s / iter per device, on 1 devices)
[03/05 20:02:58 d2.evaluation.evaluator]: Total inference pure compute time: 0:01:07 (0.068662 s / iter per device, on 1 devices)
[03/05 20:02:58 d2.evaluation.sem_seg_evaluation]: OrderedDict([('sem_seg', {'mIoU': 55.509837565716715, 'fwIoU': 80.60978506023935, 'IoU-road': 91.74772297092912, 'BoundaryIoU-road': 83.92335713918986, 'min(IoU, B-Iou)-road': 83.92335713918986, 'IoU-drivable fallback or parking': 54.59644256925831, 'BoundaryIoU-drivable fallback or parking': 36.51040506768972, 'min(IoU, B-Iou)-drivable fallback or parking': 36.51040506768972, 'IoU-sidewalk': 50.13058823537598, 'BoundaryIoU-sidewalk': 19.554893884146964, 'min(IoU, B-Iou)-sidewalk': 19.554893884146964, 'IoU-non-drivable fallback or rail track': 32.99622646631646, 'BoundaryIoU-non-drivable fallback or rail track': 22.3428855524948, 'min(IoU, B-Iou)-non-drivable fallback or rail track': 22.3428855524948, 'IoU-person or animal': 56.774867827669475, 'BoundaryIoU-person or animal': 21.485776020899554, 'min(IoU, B-Iou)-person or animal': 21.485776020899554, 'IoU-out of roi or rider': 64.23768797261708, 'BoundaryIoU-out of roi or rider': 27.92024286384356, 'min(IoU, B-Iou)-out of roi or rider': 27.92024286384356, 'IoU-motorcycle': 65.61284641193791, 'BoundaryIoU-motorcycle': 26.919503304704108, 'min(IoU, B-Iou)-motorcycle': 26.919503304704108, 'IoU-bicycle': 11.282021030277111, 'BoundaryIoU-bicycle': 24.720599341359524, 'min(IoU, B-Iou)-bicycle': 11.282021030277111, 'IoU-autorickshaw': 73.70285816330897, 'BoundaryIoU-autorickshaw': 30.80724175181332, 'min(IoU, B-Iou)-autorickshaw': 30.80724175181332, 'IoU-car': 86.77708473882296, 'BoundaryIoU-car': 53.851970179028044, 'min(IoU, B-Iou)-car': 53.851970179028044, 'IoU-truck': 79.80089555064073, 'BoundaryIoU-truck': 0.0, 'min(IoU, B-Iou)-truck': 0.0, 'IoU-bus': 81.8498004827378, 'BoundaryIoU-bus': 0.0, 'min(IoU, B-Iou)-bus': 0.0, 'IoU-trailer or caravan or vehicle fallback': 0.0, 'BoundaryIoU-trailer or caravan or vehicle fallback': 0.0, 'min(IoU, B-Iou)-trailer or caravan or vehicle fallback': 0.0, 'IoU-curb': 56.2384841207398, 'BoundaryIoU-curb': 0.0, 'min(IoU, B-Iou)-curb': 0.0, 'IoU-wall': 58.63055055282862, 'BoundaryIoU-wall': 0.0, 'min(IoU, B-Iou)-wall': 0.0, 'IoU-fence': 21.745962471300327, 'BoundaryIoU-fence': 0.0, 'min(IoU, B-Iou)-fence': 0.0, 'IoU-guard rail': 36.66249340570597, 'BoundaryIoU-guard rail': 0.0, 'min(IoU, B-Iou)-guard rail': 0.0, 'IoU-billboard': 57.319740720043946, 'BoundaryIoU-billboard': 0.0, 'min(IoU, B-Iou)-billboard': 0.0, 'IoU-traffic sign': 56.57645744137311, 'BoundaryIoU-traffic sign': 0.0, 'min(IoU, B-Iou)-traffic sign': 0.0, 'IoU-traffic light': 20.280489073108406, 'BoundaryIoU-traffic light': 0.0, 'min(IoU, B-Iou)-traffic light': 0.0, 'IoU-polegroup or pole': 42.93528910709338, 'BoundaryIoU-polegroup or pole': 0.0, 'min(IoU, B-Iou)-polegroup or pole': 0.0, 'IoU-obs-str-bar-fallback': 33.656568419745156, 'BoundaryIoU-obs-str-bar-fallback': 0.0, 'min(IoU, B-Iou)-obs-str-bar-fallback': 0.0, 'IoU-building': 62.56261149261921, 'BoundaryIoU-building': 0.0, 'min(IoU, B-Iou)-building': 0.0, 'IoU-tunnel or bridge': 64.31203619289394, 'BoundaryIoU-tunnel or bridge': 0.0, 'min(IoU, B-Iou)-tunnel or bridge': 0.0, 'IoU-vegetation': 86.41247209754532, 'BoundaryIoU-vegetation': 0.0, 'min(IoU, B-Iou)-vegetation': 0.0, 'IoU-sky or fallback background': 96.41357919374528, 'BoundaryIoU-sky or fallback background': 0.0, 'min(IoU, B-Iou)-sky or fallback background': 0.0, 'mACC': 66.41421336278849, 'pACC': 88.20755434537581, 'ACC-road': 94.71069430894333, 'ACC-drivable fallback or parking': 81.71001071168294, 'ACC-sidewalk': 62.6345319042613, 'ACC-non-drivable fallback or rail track': 35.25772493096006, 'ACC-person or animal': 73.70496745124298, 'ACC-out of roi or rider': 80.83383826096117, 'ACC-motorcycle': 79.8118577736163, 'ACC-bicycle': 11.538751602604389, 'ACC-autorickshaw': 85.0506951468025, 'ACC-car': 94.72005378493998, 'ACC-truck': 89.15425037946434, 'ACC-bus': 86.57159841108987, 'ACC-trailer or caravan or vehicle fallback': 0.0, 'ACC-curb': 78.98679758626724, 'ACC-wall': 78.72476610953775, 'ACC-fence': 32.54676989252212, 'ACC-guard rail': 43.11041728910365, 'ACC-billboard': 75.49862421860692, 'ACC-traffic sign': 60.63306335904238, 'ACC-traffic light': 24.48800205696108, 'ACC-polegroup or pole': 53.6686683075143, 'ACC-obs-str-bar-fallback': 43.1113248836381, 'ACC-building': 80.84058125767436, 'ACC-tunnel or bridge': 86.09053837861414, 'ACC-vegetation': 95.35357351189555, 'ACC-sky or fallback background': 98.01744591455362})])
[03/05 20:02:58 d2.engine.defaults]: Evaluation results for idd_sem_seg_val in csv format:
[03/05 20:02:58 d2.evaluation.testing]: copypaste: Task: sem_seg
[03/05 20:02:58 d2.evaluation.testing]: copypaste: mIoU,fwIoU,mACC,pACC
[03/05 20:02:58 d2.evaluation.testing]: copypaste: 55.5098,80.6098,66.4142,88.2076
[03/05 20:02:58 mask2former.data.dataset_mappers.semantic_dataset_mapper]: [SemanticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=..., max_size=4096, sample_style='choice'), RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[768, 768], single_category_max_area=1.0, ignored_category=255), <detectron2.projects.point_rend.color_augmentation.ColorAugSSDTransform object at 0x7f2557ae2040>, RandomFlip()]
[03/05 20:02:58 mask2former.data.dataset_mappers.semantic_dataset_mapper]: [SemanticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=..., max_size=4096, sample_style='choice'), RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[768, 768], single_category_max_area=1.0, ignored_category=255), <detectron2.projects.point_rend.color_augmentation.ColorAugSSDTransform object at 0x7f2557ae26a0>, RandomFlip()]
[03/05 20:02:58 mask2former.data.dataset_mappers.semantic_dataset_mapper]: [SemanticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=..., max_size=4096, sample_style='choice'), RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[768, 768], single_category_max_area=1.0, ignored_category=255), <detectron2.projects.point_rend.color_augmentation.ColorAugSSDTransform object at 0x7f2557ae27c0>, RandomFlip()]
[03/05 20:02:58 mask2former.data.dataset_mappers.semantic_dataset_mapper]: [SemanticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=..., max_size=4096, sample_style='choice'), RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[768, 768], single_category_max_area=1.0, ignored_category=255), <detectron2.projects.point_rend.color_augmentation.ColorAugSSDTransform object at 0x7f2557ae25b0>, RandomFlip()]
[03/05 20:02:58 mask2former.data.dataset_mappers.semantic_dataset_mapper]: [SemanticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=..., max_size=4096, sample_style='choice'), RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[768, 768], single_category_max_area=1.0, ignored_category=255), <detectron2.projects.point_rend.color_augmentation.ColorAugSSDTransform object at 0x7f2557ae29d0>, RandomFlip()]
[03/05 20:02:58 mask2former.data.dataset_mappers.semantic_dataset_mapper]: [SemanticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=..., max_size=4096, sample_style='choice'), RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[768, 768], single_category_max_area=1.0, ignored_category=255), <detectron2.projects.point_rend.color_augmentation.ColorAugSSDTransform object at 0x7f2557ae2070>, RandomFlip()]
[03/05 20:02:58 mask2former.data.dataset_mappers.semantic_dataset_mapper]: [SemanticDatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=..., max_size=4096, sample_style='choice'), RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[768, 768], single_category_max_area=1.0, ignored_category=255), <detectron2.projects.point_rend.color_augmentation.ColorAugSSDTransform object at 0x7f2557ae2e50>, RandomFlip()]
[03/05 20:02:58 mask2former.data.dataloader.DaliDataLoader]: evaluate ade_sem_seg_val
[03/05 20:02:58 d2.data.common]: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[03/05 20:02:58 d2.data.common]: Serializing 2000 elements to byte tensors and concatenating them all ...
[03/05 20:02:58 d2.data.common]: Serialized dataset takes 0.54 MiB
[03/05 20:02:58 d2.evaluation.evaluator]: Start inference on 2000 batches
[03/05 20:03:01 d2.evaluation.evaluator]: Inference done 32/2000. Dataloading: 0.0018 s/iter. Inference: 0.0611 s/iter. Eval: 0.0117 s/iter. Total: 0.0746 s/iter. ETA=0:02:26
[03/05 20:03:06 d2.evaluation.evaluator]: Inference done 103/2000. Dataloading: 0.0017 s/iter. Inference: 0.0582 s/iter. Eval: 0.0121 s/iter. Total: 0.0720 s/iter. ETA=0:02:16
[03/05 20:03:11 d2.evaluation.evaluator]: Inference done 175/2000. Dataloading: 0.0018 s/iter. Inference: 0.0558 s/iter. Eval: 0.0133 s/iter. Total: 0.0710 s/iter. ETA=0:02:09
[03/05 20:03:16 d2.evaluation.evaluator]: Inference done 245/2000. Dataloading: 0.0017 s/iter. Inference: 0.0569 s/iter. Eval: 0.0126 s/iter. Total: 0.0713 s/iter. ETA=0:02:05
[03/05 20:03:21 d2.evaluation.evaluator]: Inference done 314/2000. Dataloading: 0.0018 s/iter. Inference: 0.0569 s/iter. Eval: 0.0129 s/iter. Total: 0.0717 s/iter. ETA=0:02:00
[03/05 20:03:26 d2.evaluation.evaluator]: Inference done 388/2000. Dataloading: 0.0018 s/iter. Inference: 0.0561 s/iter. Eval: 0.0130 s/iter. Total: 0.0710 s/iter. ETA=0:01:54
[03/05 20:03:31 d2.evaluation.evaluator]: Inference done 467/2000. Dataloading: 0.0018 s/iter. Inference: 0.0551 s/iter. Eval: 0.0127 s/iter. Total: 0.0697 s/iter. ETA=0:01:46
[03/05 20:03:36 d2.evaluation.evaluator]: Inference done 541/2000. Dataloading: 0.0018 s/iter. Inference: 0.0549 s/iter. Eval: 0.0128 s/iter. Total: 0.0696 s/iter. ETA=0:01:41
[03/05 20:03:41 d2.evaluation.evaluator]: Inference done 623/2000. Dataloading: 0.0018 s/iter. Inference: 0.0540 s/iter. Eval: 0.0127 s/iter. Total: 0.0685 s/iter. ETA=0:01:34
[03/05 20:03:46 d2.evaluation.evaluator]: Inference done 705/2000. Dataloading: 0.0017 s/iter. Inference: 0.0536 s/iter. Eval: 0.0124 s/iter. Total: 0.0677 s/iter. ETA=0:01:27
[03/05 20:03:51 d2.evaluation.evaluator]: Inference done 785/2000. Dataloading: 0.0017 s/iter. Inference: 0.0534 s/iter. Eval: 0.0121 s/iter. Total: 0.0673 s/iter. ETA=0:01:21
[03/05 20:03:56 d2.evaluation.evaluator]: Inference done 866/2000. Dataloading: 0.0017 s/iter. Inference: 0.0527 s/iter. Eval: 0.0124 s/iter. Total: 0.0668 s/iter. ETA=0:01:15
[03/05 20:04:01 d2.evaluation.evaluator]: Inference done 945/2000. Dataloading: 0.0017 s/iter. Inference: 0.0527 s/iter. Eval: 0.0121 s/iter. Total: 0.0666 s/iter. ETA=0:01:10
[03/05 20:04:06 d2.evaluation.evaluator]: Inference done 1025/2000. Dataloading: 0.0017 s/iter. Inference: 0.0526 s/iter. Eval: 0.0120 s/iter. Total: 0.0664 s/iter. ETA=0:01:04
[03/05 20:04:12 d2.evaluation.evaluator]: Inference done 1103/2000. Dataloading: 0.0017 s/iter. Inference: 0.0525 s/iter. Eval: 0.0120 s/iter. Total: 0.0663 s/iter. ETA=0:00:59
[03/05 20:04:17 d2.evaluation.evaluator]: Inference done 1180/2000. Dataloading: 0.0017 s/iter. Inference: 0.0523 s/iter. Eval: 0.0122 s/iter. Total: 0.0663 s/iter. ETA=0:00:54
[03/05 20:04:22 d2.evaluation.evaluator]: Inference done 1260/2000. Dataloading: 0.0017 s/iter. Inference: 0.0524 s/iter. Eval: 0.0120 s/iter. Total: 0.0661 s/iter. ETA=0:00:48
[03/05 20:04:27 d2.evaluation.evaluator]: Inference done 1339/2000. Dataloading: 0.0017 s/iter. Inference: 0.0523 s/iter. Eval: 0.0119 s/iter. Total: 0.0659 s/iter. ETA=0:00:43
[03/05 20:04:32 d2.evaluation.evaluator]: Inference done 1416/2000. Dataloading: 0.0017 s/iter. Inference: 0.0524 s/iter. Eval: 0.0118 s/iter. Total: 0.0659 s/iter. ETA=0:00:38
[03/05 20:04:37 d2.evaluation.evaluator]: Inference done 1499/2000. Dataloading: 0.0017 s/iter. Inference: 0.0522 s/iter. Eval: 0.0117 s/iter. Total: 0.0656 s/iter. ETA=0:00:32
[03/05 20:04:42 d2.evaluation.evaluator]: Inference done 1581/2000. Dataloading: 0.0017 s/iter. Inference: 0.0520 s/iter. Eval: 0.0117 s/iter. Total: 0.0654 s/iter. ETA=0:00:27
[03/05 20:04:47 d2.evaluation.evaluator]: Inference done 1664/2000. Dataloading: 0.0017 s/iter. Inference: 0.0518 s/iter. Eval: 0.0116 s/iter. Total: 0.0652 s/iter. ETA=0:00:21
[03/05 20:04:52 d2.evaluation.evaluator]: Inference done 1738/2000. Dataloading: 0.0017 s/iter. Inference: 0.0520 s/iter. Eval: 0.0116 s/iter. Total: 0.0653 s/iter. ETA=0:00:17
[03/05 20:04:57 d2.evaluation.evaluator]: Inference done 1815/2000. Dataloading: 0.0017 s/iter. Inference: 0.0520 s/iter. Eval: 0.0116 s/iter. Total: 0.0653 s/iter. ETA=0:00:12
[03/05 20:05:02 d2.evaluation.evaluator]: Inference done 1885/2000. Dataloading: 0.0017 s/iter. Inference: 0.0522 s/iter. Eval: 0.0116 s/iter. Total: 0.0655 s/iter. ETA=0:00:07
[03/05 20:05:07 d2.evaluation.evaluator]: Inference done 1965/2000. Dataloading: 0.0017 s/iter. Inference: 0.0521 s/iter. Eval: 0.0116 s/iter. Total: 0.0654 s/iter. ETA=0:00:02
[03/05 20:05:09 d2.evaluation.evaluator]: Total inference time: 0:02:10.453929 (0.065390 s / iter per device, on 1 devices)
[03/05 20:05:09 d2.evaluation.evaluator]: Total inference pure compute time: 0:01:43 (0.052077 s / iter per device, on 1 devices)
[03/05 20:05:09 d2.evaluation.sem_seg_evaluation]: OrderedDict([('sem_seg', {'mIoU': 0.8857094792171634, 'fwIoU': 1.1620566605120628, 'IoU-flag': 0.04297189605406256, 'BoundaryIoU-flag': 70.11987644148861, 'min(IoU, B-Iou)-flag': 0.04297189605406256, 'IoU-wall': 2.661316966849387, 'BoundaryIoU-wall': 3.8531970826003596, 'min(IoU, B-Iou)-wall': 2.661316966849387, 'IoU-building, edifice': 1.958537160217028, 'BoundaryIoU-building, edifice': 0.0, 'min(IoU, B-Iou)-building, edifice': 0.0, 'IoU-sky': 1.2033052032213067, 'BoundaryIoU-sky': 0.0, 'min(IoU, B-Iou)-sky': 0.0, 'IoU-floor, flooring': 0.25806235999666133, 'BoundaryIoU-floor, flooring': 0.0, 'min(IoU, B-Iou)-floor, flooring': 0.0, 'IoU-tree': 0.0031438507241293694, 'BoundaryIoU-tree': 0.0, 'min(IoU, B-Iou)-tree': 0.0, 'IoU-ceiling': 0.15462627878615479, 'BoundaryIoU-ceiling': 0.0, 'min(IoU, B-Iou)-ceiling': 0.0, 'IoU-road, route': 2.5519756312696664, 'BoundaryIoU-road, route': 0.0, 'min(IoU, B-Iou)-road, route': 0.0, 'IoU-bed ': 0.5159919475371794, 'BoundaryIoU-bed ': 0.0, 'min(IoU, B-Iou)-bed ': 0.0, 'IoU-windowpane, window ': 0.5209304644409205, 'BoundaryIoU-windowpane, window ': 0.0, 'min(IoU, B-Iou)-windowpane, window ': 0.0, 'IoU-grass': 0.00013545028743251598, 'BoundaryIoU-grass': 0.0, 'min(IoU, B-Iou)-grass': 0.0, 'IoU-cabinet': 0.015949204693490048, 'BoundaryIoU-cabinet': 0.0, 'min(IoU, B-Iou)-cabinet': 0.0, 'IoU-sidewalk, pavement': 1.3585111953062934, 'BoundaryIoU-sidewalk, pavement': 0.0, 'min(IoU, B-Iou)-sidewalk, pavement': 0.0, 'IoU-person, individual, someone, somebody, mortal, soul': 0.6643281278098921, 'BoundaryIoU-person, individual, someone, somebody, mortal, soul': 0.0, 'min(IoU, B-Iou)-person, individual, someone, somebody, mortal, soul': 0.0, 'IoU-earth, ground': 0.0, 'BoundaryIoU-earth, ground': 0.0, 'min(IoU, B-Iou)-earth, ground': 0.0, 'IoU-door, double door': 0.10054982057839698, 'BoundaryIoU-door, double door': 0.0, 'min(IoU, B-Iou)-door, double door': 0.0, 'IoU-table': 0.1367646380701871, 'BoundaryIoU-table': 0.0, 'min(IoU, B-Iou)-table': 0.0, 'IoU-mountain, mount': 0.048542467807389064, 'BoundaryIoU-mountain, mount': 0.0, 'min(IoU, B-Iou)-mountain, mount': 0.0, 'IoU-plant, flora, plant life': 1.092134622798116, 'BoundaryIoU-plant, flora, plant life': 0.0, 'min(IoU, B-Iou)-plant, flora, plant life': 0.0, 'IoU-curtain, drape, drapery, mantle, pall': 0.4476606773605012, 'BoundaryIoU-curtain, drape, drapery, mantle, pall': 0.0, 'min(IoU, B-Iou)-curtain, drape, drapery, mantle, pall': 0.0, 'IoU-chair': 0.21663554920494277, 'BoundaryIoU-chair': 0.0, 'min(IoU, B-Iou)-chair': 0.0, 'IoU-car, auto, automobile, machine, motorcar': 1.2132625990835972, 'BoundaryIoU-car, auto, automobile, machine, motorcar': 0.0, 'min(IoU, B-Iou)-car, auto, automobile, machine, motorcar': 0.0, 'IoU-water': 0.0, 'BoundaryIoU-water': 0.0, 'min(IoU, B-Iou)-water': 0.0, 'IoU-painting, picture': 0.05222791944540591, 'BoundaryIoU-painting, picture': 0.0, 'min(IoU, B-Iou)-painting, picture': 0.0, 'IoU-sofa, couch, lounge': 0.02636613466568803, 'BoundaryIoU-sofa, couch, lounge': 0.0, 'min(IoU, B-Iou)-sofa, couch, lounge': 0.0, 'IoU-shelf': 0.02049511222626604, 'BoundaryIoU-shelf': 0.0, 'min(IoU, B-Iou)-shelf': 0.0, 'IoU-house': 0.010875793013645009, 'BoundaryIoU-house': 0.0, 'min(IoU, B-Iou)-house': 0.0, 'IoU-sea': 0.0, 'BoundaryIoU-sea': 0.0, 'min(IoU, B-Iou)-sea': 0.0, 'IoU-mirror': 0.0, 'BoundaryIoU-mirror': 0.0, 'min(IoU, B-Iou)-mirror': 0.0, 'IoU-rug, carpet, carpeting': 0.00019716336516611695, 'BoundaryIoU-rug, carpet, carpeting': 0.0, 'min(IoU, B-Iou)-rug, carpet, carpeting': 0.0, 'IoU-field': 4.918587539053585e-05, 'BoundaryIoU-field': 0.0, 'min(IoU, B-Iou)-field': 0.0, 'IoU-armchair': 0.23924199093684817, 'BoundaryIoU-armchair': 0.0, 'min(IoU, B-Iou)-armchair': 0.0, 'IoU-seat': 0.0, 'BoundaryIoU-seat': 0.0, 'min(IoU, B-Iou)-seat': 0.0, 'IoU-fence, fencing': 6.896309321646671, 'BoundaryIoU-fence, fencing': 0.0, 'min(IoU, B-Iou)-fence, fencing': 0.0, 'IoU-desk': 0.05358872873806734, 'BoundaryIoU-desk': 0.0, 'min(IoU, B-Iou)-desk': 0.0, 'IoU-rock, stone': 0.0, 'BoundaryIoU-rock, stone': 0.0, 'min(IoU, B-Iou)-rock, stone': 0.0, 'IoU-wardrobe, closet, press': 0.0002361469321955249, 'BoundaryIoU-wardrobe, closet, press': 0.0, 'min(IoU, B-Iou)-wardrobe, closet, press': 0.0, 'IoU-lamp': 0.0, 'BoundaryIoU-lamp': 0.0, 'min(IoU, B-Iou)-lamp': 0.0, 'IoU-bathtub, bathing tub, bath, tub': 0.0, 'BoundaryIoU-bathtub, bathing tub, bath, tub': 0.0, 'min(IoU, B-Iou)-bathtub, bathing tub, bath, tub': 0.0, 'IoU-railing, rail': 0.15326408142097625, 'BoundaryIoU-railing, rail': 0.0, 'min(IoU, B-Iou)-railing, rail': 0.0, 'IoU-cushion': 0.0, 'BoundaryIoU-cushion': 0.0, 'min(IoU, B-Iou)-cushion': 0.0, 'IoU-base, pedestal, stand': 0.0, 'BoundaryIoU-base, pedestal, stand': 0.0, 'min(IoU, B-Iou)-base, pedestal, stand': 0.0, 'IoU-box': 0.019922557910215064, 'BoundaryIoU-box': 0.0, 'min(IoU, B-Iou)-box': 0.0, 'IoU-column, pillar': 0.0, 'BoundaryIoU-column, pillar': 0.0, 'min(IoU, B-Iou)-column, pillar': 0.0, 'IoU-signboard, sign': 10.05841422019212, 'BoundaryIoU-signboard, sign': 0.0, 'min(IoU, B-Iou)-signboard, sign': 0.0, 'IoU-chest of drawers, chest, bureau, dresser': 0.0, 'BoundaryIoU-chest of drawers, chest, bureau, dresser': 0.0, 'min(IoU, B-Iou)-chest of drawers, chest, bureau, dresser': 0.0, 'IoU-counter': 0.0, 'BoundaryIoU-counter': 0.0, 'min(IoU, B-Iou)-counter': 0.0, 'IoU-sand': 0.0, 'BoundaryIoU-sand': 0.0, 'min(IoU, B-Iou)-sand': 0.0, 'IoU-sink': 0.0, 'BoundaryIoU-sink': 0.0, 'min(IoU, B-Iou)-sink': 0.0, 'IoU-skyscraper': 0.0, 'BoundaryIoU-skyscraper': 0.0, 'min(IoU, B-Iou)-skyscraper': 0.0, 'IoU-fireplace, hearth, open fireplace': 0.0, 'BoundaryIoU-fireplace, hearth, open fireplace': 0.0, 'min(IoU, B-Iou)-fireplace, hearth, open fireplace': 0.0, 'IoU-refrigerator, icebox': 0.0, 'BoundaryIoU-refrigerator, icebox': 0.0, 'min(IoU, B-Iou)-refrigerator, icebox': 0.0, 'IoU-grandstand, covered stand': 0.0, 'BoundaryIoU-grandstand, covered stand': 0.0, 'min(IoU, B-Iou)-grandstand, covered stand': 0.0, 'IoU-path': 0.0, 'BoundaryIoU-path': 0.0, 'min(IoU, B-Iou)-path': 0.0, 'IoU-stairs, steps': 0.0, 'BoundaryIoU-stairs, steps': 0.0, 'min(IoU, B-Iou)-stairs, steps': 0.0, 'IoU-runway': 0.0, 'BoundaryIoU-runway': 0.0, 'min(IoU, B-Iou)-runway': 0.0, 'IoU-case, display case, showcase, vitrine': 0.0, 'BoundaryIoU-case, display case, showcase, vitrine': 0.0, 'min(IoU, B-Iou)-case, display case, showcase, vitrine': 0.0, 'IoU-pool table, billiard table, snooker table': 0.0, 'BoundaryIoU-pool table, billiard table, snooker table': 0.0, 'min(IoU, B-Iou)-pool table, billiard table, snooker table': 0.0, 'IoU-pillow': 0.24904402392391412, 'BoundaryIoU-pillow': 0.0, 'min(IoU, B-Iou)-pillow': 0.0, 'IoU-screen door, screen': 0.0, 'BoundaryIoU-screen door, screen': 0.0, 'min(IoU, B-Iou)-screen door, screen': 0.0, 'IoU-stairway, staircase': 0.0, 'BoundaryIoU-stairway, staircase': 0.0, 'min(IoU, B-Iou)-stairway, staircase': 0.0, 'IoU-river': 0.0, 'BoundaryIoU-river': 0.0, 'min(IoU, B-Iou)-river': 0.0, 'IoU-bridge, span': 0.0, 'BoundaryIoU-bridge, span': 0.0, 'min(IoU, B-Iou)-bridge, span': 0.0, 'IoU-bookcase': 0.0, 'BoundaryIoU-bookcase': 0.0, 'min(IoU, B-Iou)-bookcase': 0.0, 'IoU-blind, screen': 0.0, 'BoundaryIoU-blind, screen': 0.0, 'min(IoU, B-Iou)-blind, screen': 0.0, 'IoU-coffee table, cocktail table': 0.0, 'BoundaryIoU-coffee table, cocktail table': 0.0, 'min(IoU, B-Iou)-coffee table, cocktail table': 0.0, 'IoU-toilet, can, commode, crapper, pot, potty, stool, throne': 1.6046999900929708, 'BoundaryIoU-toilet, can, commode, crapper, pot, potty, stool, throne': 0.0, 'min(IoU, B-Iou)-toilet, can, commode, crapper, pot, potty, stool, throne': 0.0, 'IoU-flower': 0.0, 'BoundaryIoU-flower': 0.0, 'min(IoU, B-Iou)-flower': 0.0, 'IoU-book': 5.185185185185185, 'BoundaryIoU-book': 0.0, 'min(IoU, B-Iou)-book': 0.0, 'IoU-hill': 0.0, 'BoundaryIoU-hill': 0.0, 'min(IoU, B-Iou)-hill': 0.0, 'IoU-bench': 0.0, 'BoundaryIoU-bench': 0.0, 'min(IoU, B-Iou)-bench': 0.0, 'IoU-countertop': 0.0, 'BoundaryIoU-countertop': 0.0, 'min(IoU, B-Iou)-countertop': 0.0, 'IoU-stove, kitchen stove, range, kitchen range, cooking stove': 0.0, 'BoundaryIoU-stove, kitchen stove, range, kitchen range, cooking stove': 0.0, 'min(IoU, B-Iou)-stove, kitchen stove, range, kitchen range, cooking stove': 0.0, 'IoU-palm, palm tree': 0.0, 'BoundaryIoU-palm, palm tree': 0.0, 'min(IoU, B-Iou)-palm, palm tree': 0.0, 'IoU-kitchen island': 0.0, 'BoundaryIoU-kitchen island': 0.0, 'min(IoU, B-Iou)-kitchen island': 0.0, 'IoU-computer, computing machine, computing device, data processor, electronic computer, information processing system': 0.0, 'BoundaryIoU-computer, computing machine, computing device, data processor, electronic computer, information processing system': 0.0, 'min(IoU, B-Iou)-computer, computing machine, computing device, data processor, electronic computer, information processing system': 0.0, 'IoU-swivel chair': 0.0, 'BoundaryIoU-swivel chair': 0.0, 'min(IoU, B-Iou)-swivel chair': 0.0, 'IoU-boat': 0.0, 'BoundaryIoU-boat': 0.0, 'min(IoU, B-Iou)-boat': 0.0, 'IoU-bar': 0.0, 'BoundaryIoU-bar': 0.0, 'min(IoU, B-Iou)-bar': 0.0, 'IoU-arcade machine': 0.0, 'BoundaryIoU-arcade machine': 0.0, 'min(IoU, B-Iou)-arcade machine': 0.0, 'IoU-hovel, hut, hutch, shack, shanty': 0.0, 'BoundaryIoU-hovel, hut, hutch, shack, shanty': 0.0, 'min(IoU, B-Iou)-hovel, hut, hutch, shack, shanty': 0.0, 'IoU-bus, autobus, coach, charabanc, double-decker, jitney, motorbus, motorcoach, omnibus, passenger vehicle': 13.342292073285902, 'BoundaryIoU-bus, autobus, coach, charabanc, double-decker, jitney, motorbus, motorcoach, omnibus, passenger vehicle': 0.0, 'min(IoU, B-Iou)-bus, autobus, coach, charabanc, double-decker, jitney, motorbus, motorcoach, omnibus, passenger vehicle': 0.0, 'IoU-towel': 0.0, 'BoundaryIoU-towel': 0.0, 'min(IoU, B-Iou)-towel': 0.0, 'IoU-light, light source': 0.0, 'BoundaryIoU-light, light source': 0.0, 'min(IoU, B-Iou)-light, light source': 0.0, 'IoU-truck, motortruck': 20.769553085076982, 'BoundaryIoU-truck, motortruck': 0.0, 'min(IoU, B-Iou)-truck, motortruck': 0.0, 'IoU-tower': 0.0, 'BoundaryIoU-tower': 0.0, 'min(IoU, B-Iou)-tower': 0.0, 'IoU-chandelier, pendant, pendent': 0.0, 'BoundaryIoU-chandelier, pendant, pendent': 0.0, 'min(IoU, B-Iou)-chandelier, pendant, pendent': 0.0, 'IoU-awning, sunshade, sunblind': 0.0, 'BoundaryIoU-awning, sunshade, sunblind': 0.0, 'min(IoU, B-Iou)-awning, sunshade, sunblind': 0.0, 'IoU-streetlight, street lamp': 0.0, 'BoundaryIoU-streetlight, street lamp': 0.0, 'min(IoU, B-Iou)-streetlight, street lamp': 0.0, 'IoU-booth, cubicle, stall, kiosk': 0.0, 'BoundaryIoU-booth, cubicle, stall, kiosk': 0.0, 'min(IoU, B-Iou)-booth, cubicle, stall, kiosk': 0.0, 'IoU-television receiver, television, television set, tv, tv set, idiot box, boob tube, telly, goggle box': 0.0, 'BoundaryIoU-television receiver, television, television set, tv, tv set, idiot box, boob tube, telly, goggle box': 0.0, 'min(IoU, B-Iou)-television receiver, television, television set, tv, tv set, idiot box, boob tube, telly, goggle box': 0.0, 'IoU-airplane, aeroplane, plane': 0.0, 'BoundaryIoU-airplane, aeroplane, plane': 0.0, 'min(IoU, B-Iou)-airplane, aeroplane, plane': 0.0, 'IoU-dirt track': 0.0, 'BoundaryIoU-dirt track': 0.0, 'min(IoU, B-Iou)-dirt track': 0.0, 'IoU-apparel, wearing apparel, dress, clothes': 0.0, 'BoundaryIoU-apparel, wearing apparel, dress, clothes': 0.0, 'min(IoU, B-Iou)-apparel, wearing apparel, dress, clothes': 0.0, 'IoU-pole': 7.014935977981213, 'BoundaryIoU-pole': 0.0, 'min(IoU, B-Iou)-pole': 0.0, 'IoU-land, ground, soil': 0.0, 'BoundaryIoU-land, ground, soil': 0.0, 'min(IoU, B-Iou)-land, ground, soil': 0.0, 'IoU-bannister, banister, balustrade, balusters, handrail': 0.0, 'BoundaryIoU-bannister, banister, balustrade, balusters, handrail': 0.0, 'min(IoU, B-Iou)-bannister, banister, balustrade, balusters, handrail': 0.0, 'IoU-escalator, moving staircase, moving stairway': 0.0, 'BoundaryIoU-escalator, moving staircase, moving stairway': 0.0, 'min(IoU, B-Iou)-escalator, moving staircase, moving stairway': 0.0, 'IoU-ottoman, pouf, pouffe, puff, hassock': 0.0, 'BoundaryIoU-ottoman, pouf, pouffe, puff, hassock': 0.0, 'min(IoU, B-Iou)-ottoman, pouf, pouffe, puff, hassock': 0.0, 'IoU-bottle': 0.0, 'BoundaryIoU-bottle': 0.0, 'min(IoU, B-Iou)-bottle': 0.0, 'IoU-buffet, counter, sideboard': 0.0, 'BoundaryIoU-buffet, counter, sideboard': 0.0, 'min(IoU, B-Iou)-buffet, counter, sideboard': 0.0, 'IoU-poster, posting, placard, notice, bill, card': 0.0, 'BoundaryIoU-poster, posting, placard, notice, bill, card': 0.0, 'min(IoU, B-Iou)-poster, posting, placard, notice, bill, card': 0.0, 'IoU-stage': 0.0, 'BoundaryIoU-stage': 0.0, 'min(IoU, B-Iou)-stage': 0.0, 'IoU-van': 0.0, 'BoundaryIoU-van': 0.0, 'min(IoU, B-Iou)-van': 0.0, 'IoU-ship': 0.0, 'BoundaryIoU-ship': 0.0, 'min(IoU, B-Iou)-ship': 0.0, 'IoU-fountain': 0.0, 'BoundaryIoU-fountain': 0.0, 'min(IoU, B-Iou)-fountain': 0.0, 'IoU-conveyer belt, conveyor belt, conveyer, conveyor, transporter': 0.0, 'BoundaryIoU-conveyer belt, conveyor belt, conveyer, conveyor, transporter': 0.0, 'min(IoU, B-Iou)-conveyer belt, conveyor belt, conveyer, conveyor, transporter': 0.0, 'IoU-canopy': 0.0, 'BoundaryIoU-canopy': 0.0, 'min(IoU, B-Iou)-canopy': 0.0, 'IoU-washer, automatic washer, washing machine': 0.0, 'BoundaryIoU-washer, automatic washer, washing machine': 0.0, 'min(IoU, B-Iou)-washer, automatic washer, washing machine': 0.0, 'IoU-plaything, toy': 0.0, 'BoundaryIoU-plaything, toy': 0.0, 'min(IoU, B-Iou)-plaything, toy': 0.0, 'IoU-swimming pool, swimming bath, natatorium': 0.0, 'BoundaryIoU-swimming pool, swimming bath, natatorium': 0.0, 'min(IoU, B-Iou)-swimming pool, swimming bath, natatorium': 0.0, 'IoU-stool': 0.0, 'BoundaryIoU-stool': 0.0, 'min(IoU, B-Iou)-stool': 0.0, 'IoU-barrel, cask': 0.0, 'BoundaryIoU-barrel, cask': 0.0, 'min(IoU, B-Iou)-barrel, cask': 0.0, 'IoU-basket, handbasket': 0.0, 'BoundaryIoU-basket, handbasket': 0.0, 'min(IoU, B-Iou)-basket, handbasket': 0.0, 'IoU-waterfall, falls': 0.0, 'BoundaryIoU-waterfall, falls': 0.0, 'min(IoU, B-Iou)-waterfall, falls': 0.0, 'IoU-tent, collapsible shelter': 0.0, 'BoundaryIoU-tent, collapsible shelter': 0.0, 'min(IoU, B-Iou)-tent, collapsible shelter': 0.0, 'IoU-bag': 0.0, 'BoundaryIoU-bag': 0.0, 'min(IoU, B-Iou)-bag': 0.0, 'IoU-minibike, motorbike': 1.6131375572354514, 'BoundaryIoU-minibike, motorbike': 0.0, 'min(IoU, B-Iou)-minibike, motorbike': 0.0, 'IoU-cradle': 0.0, 'BoundaryIoU-cradle': 0.0, 'min(IoU, B-Iou)-cradle': 0.0, 'IoU-oven': 0.0, 'BoundaryIoU-oven': 0.0, 'min(IoU, B-Iou)-oven': 0.0, 'IoU-ball': 0.0, 'BoundaryIoU-ball': 0.0, 'min(IoU, B-Iou)-ball': 0.0, 'IoU-food, solid food': 0.012582160622799229, 'BoundaryIoU-food, solid food': 0.0, 'min(IoU, B-Iou)-food, solid food': 0.0, 'IoU-step, stair': 0.0, 'BoundaryIoU-step, stair': 0.0, 'min(IoU, B-Iou)-step, stair': 0.0, 'IoU-tank, storage tank': 0.0, 'BoundaryIoU-tank, storage tank': 0.0, 'min(IoU, B-Iou)-tank, storage tank': 0.0, 'IoU-trade name, brand name, brand, marque': 0.0, 'BoundaryIoU-trade name, brand name, brand, marque': 0.0, 'min(IoU, B-Iou)-trade name, brand name, brand, marque': 0.0, 'IoU-microwave, microwave oven': 0.11621528832835455, 'BoundaryIoU-microwave, microwave oven': 0.0, 'min(IoU, B-Iou)-microwave, microwave oven': 0.0, 'IoU-pot, flowerpot': 0.0, 'BoundaryIoU-pot, flowerpot': 0.0, 'min(IoU, B-Iou)-pot, flowerpot': 0.0, 'IoU-animal, animate being, beast, brute, creature, fauna': 31.772384180425995, 'BoundaryIoU-animal, animate being, beast, brute, creature, fauna': 0.0, 'min(IoU, B-Iou)-animal, animate being, beast, brute, creature, fauna': 0.0, 'IoU-bicycle, bike, wheel, cycle ': 14.88074915865971, 'BoundaryIoU-bicycle, bike, wheel, cycle ': 0.0, 'min(IoU, B-Iou)-bicycle, bike, wheel, cycle ': 0.0, 'IoU-lake': 0.0, 'BoundaryIoU-lake': 0.0, 'min(IoU, B-Iou)-lake': 0.0, 'IoU-dishwasher, dish washer, dishwashing machine': 0.0, 'BoundaryIoU-dishwasher, dish washer, dishwashing machine': 0.0, 'min(IoU, B-Iou)-dishwasher, dish washer, dishwashing machine': 0.0, 'IoU-screen, silver screen, projection screen': 0.0, 'BoundaryIoU-screen, silver screen, projection screen': 0.0, 'min(IoU, B-Iou)-screen, silver screen, projection screen': 0.0, 'IoU-blanket, cover': 0.0, 'BoundaryIoU-blanket, cover': 0.0, 'min(IoU, B-Iou)-blanket, cover': 0.0, 'IoU-sculpture': 0.0, 'BoundaryIoU-sculpture': 0.0, 'min(IoU, B-Iou)-sculpture': 0.0, 'IoU-hood, exhaust hood': 0.0, 'BoundaryIoU-hood, exhaust hood': 0.0, 'min(IoU, B-Iou)-hood, exhaust hood': 0.0, 'IoU-sconce': 0.0, 'BoundaryIoU-sconce': 0.0, 'min(IoU, B-Iou)-sconce': 0.0, 'IoU-vase': 0.0, 'BoundaryIoU-vase': 0.0, 'min(IoU, B-Iou)-vase': 0.0, 'IoU-traffic light, traffic signal, stoplight': 3.589154542102726, 'BoundaryIoU-traffic light, traffic signal, stoplight': 0.0, 'min(IoU, B-Iou)-traffic light, traffic signal, stoplight': 0.0, 'IoU-tray': 0.0, 'BoundaryIoU-tray': 0.0, 'min(IoU, B-Iou)-tray': 0.0, 'IoU-ashcan, trash can, garbage can, wastebin, ash bin, ash-bin, ashbin, dustbin, trash barrel, trash bin': 0.0, 'BoundaryIoU-ashcan, trash can, garbage can, wastebin, ash bin, ash-bin, ashbin, dustbin, trash barrel, trash bin': 0.0, 'min(IoU, B-Iou)-ashcan, trash can, garbage can, wastebin, ash bin, ash-bin, ashbin, dustbin, trash barrel, trash bin': 0.0, 'IoU-fan': 0.0, 'BoundaryIoU-fan': 0.0, 'min(IoU, B-Iou)-fan': 0.0, 'IoU-pier, wharf, wharfage, dock': 0.0, 'BoundaryIoU-pier, wharf, wharfage, dock': 0.0, 'min(IoU, B-Iou)-pier, wharf, wharfage, dock': 0.0, 'IoU-crt screen': 0.0, 'BoundaryIoU-crt screen': 0.0, 'min(IoU, B-Iou)-crt screen': 0.0, 'IoU-plate': 0.0, 'BoundaryIoU-plate': 0.0, 'min(IoU, B-Iou)-plate': 0.0, 'IoU-monitor, monitoring device': 0.0, 'BoundaryIoU-monitor, monitoring device': 0.0, 'min(IoU, B-Iou)-monitor, monitoring device': 0.0, 'IoU-bulletin board, notice board': 0.00996419118791842, 'BoundaryIoU-bulletin board, notice board': 0.0, 'min(IoU, B-Iou)-bulletin board, notice board': 0.0, 'IoU-shower': 0.0, 'BoundaryIoU-shower': 0.0, 'min(IoU, B-Iou)-shower': 0.0, 'IoU-radiator': 0.0, 'BoundaryIoU-radiator': 0.0, 'min(IoU, B-Iou)-radiator': 0.0, 'IoU-glass, drinking glass': 0.0, 'BoundaryIoU-glass, drinking glass': 0.0, 'min(IoU, B-Iou)-glass, drinking glass': 0.0, 'IoU-clock': 0.0, 'BoundaryIoU-clock': 0.0, 'min(IoU, B-Iou)-clock': 0.0, 'mACC': 1.2483358442271775, 'pACC': 2.007207080448458, 'ACC-flag': 25.558965890665853, 'ACC-wall': 4.800377988110857, 'ACC-building, edifice': 3.455101541549143, 'ACC-sky': 2.1600123978194032, 'ACC-floor, flooring': 0.5022319667716788, 'ACC-tree': 0.006418403269649088, 'ACC-ceiling': 0.3135872643582658, 'ACC-road, route': 4.225773429694061, 'ACC-bed ': 0.9765983981981968, 'ACC-windowpane, window ': 1.0081176915506072, 'ACC-grass': 0.0003027016013540991, 'ACC-cabinet': 0.03134906910590101, 'ACC-sidewalk, pavement': 3.0813862978320414, 'ACC-person, individual, someone, somebody, mortal, soul': 0.9164865407938035, 'ACC-earth, ground': 0.0, 'ACC-door, double door': 0.24012124131573445, 'ACC-table': 0.34937493574487427, 'ACC-mountain, mount': 0.07413227442111786, 'ACC-plant, flora, plant life': 1.9048028032713704, 'ACC-curtain, drape, drapery, mantle, pall': 1.12099272130781, 'ACC-chair': 0.43829939261090306, 'ACC-car, auto, automobile, machine, motorcar': 1.9831205869057205, 'ACC-water': 0.0, 'ACC-painting, picture': 0.13105662159448825, 'ACC-sofa, couch, lounge': 0.06851666194451105, 'ACC-shelf': 0.02190491548646288, 'ACC-house': 0.02584776807656839, 'ACC-sea': 0.0, 'ACC-mirror': 0.0, 'ACC-rug, carpet, carpeting': 0.0004689179537863321, 'ACC-field': 4.918708504545378e-05, 'ACC-armchair': 0.2520537340541085, 'ACC-seat': 0.0, 'ACC-fence, fencing': 8.485588388662487, 'ACC-desk': 0.053608884560641244, 'ACC-rock, stone': 0.0, 'ACC-wardrobe, closet, press': 0.00032189635581135587, 'ACC-lamp': 0.0, 'ACC-bathtub, bathing tub, bath, tub': 0.0, 'ACC-railing, rail': 0.23740174292381208, 'ACC-cushion': 0.0, 'ACC-base, pedestal, stand': 0.0, 'ACC-box': 0.0199788297721222, 'ACC-column, pillar': 0.0, 'ACC-signboard, sign': 10.226833624963547, 'ACC-chest of drawers, chest, bureau, dresser': 0.0, 'ACC-counter': 0.0, 'ACC-sand': 0.0, 'ACC-sink': 0.0, 'ACC-skyscraper': 0.0, 'ACC-fireplace, hearth, open fireplace': 0.0, 'ACC-refrigerator, icebox': 0.0, 'ACC-grandstand, covered stand': 0.0, 'ACC-path': 0.0, 'ACC-stairs, steps': 0.0, 'ACC-runway': 0.0, 'ACC-case, display case, showcase, vitrine': 0.0, 'ACC-pool table, billiard table, snooker table': 0.0, 'ACC-pillow': 0.25279960105226656, 'ACC-screen door, screen': 0.0, 'ACC-stairway, staircase': 0.0, 'ACC-river': 0.0, 'ACC-bridge, span': 0.0, 'ACC-bookcase': 0.0, 'ACC-blind, screen': 0.0, 'ACC-coffee table, cocktail table': 0.0, 'ACC-toilet, can, commode, crapper, pot, potty, stool, throne': 1.7518050341591558, 'ACC-flower': 0.0, 'ACC-book': 5.206648906609108, 'ACC-hill': 0.0, 'ACC-bench': 0.0, 'ACC-countertop': 0.0, 'ACC-stove, kitchen stove, range, kitchen range, cooking stove': 0.0, 'ACC-palm, palm tree': 0.0, 'ACC-kitchen island': 0.0, 'ACC-computer, computing machine, computing device, data processor, electronic computer, information processing system': 0.0, 'ACC-swivel chair': 0.0, 'ACC-boat': 0.0, 'ACC-bar': 0.0, 'ACC-arcade machine': 0.0, 'ACC-hovel, hut, hutch, shack, shanty': 0.0, 'ACC-bus, autobus, coach, charabanc, double-decker, jitney, motorbus, motorcoach, omnibus, passenger vehicle': 16.01618316355812, 'ACC-towel': 0.0, 'ACC-light, light source': 0.0, 'ACC-truck, motortruck': 26.302003951453575, 'ACC-tower': 0.0, 'ACC-chandelier, pendant, pendent': 0.0, 'ACC-awning, sunshade, sunblind': 0.0, 'ACC-streetlight, street lamp': 0.0, 'ACC-booth, cubicle, stall, kiosk': 0.0, 'ACC-television receiver, television, television set, tv, tv set, idiot box, boob tube, telly, goggle box': 0.0, 'ACC-airplane, aeroplane, plane': 0.0, 'ACC-dirt track': 0.0, 'ACC-apparel, wearing apparel, dress, clothes': 0.0, 'ACC-pole': 10.357060038207136, 'ACC-land, ground, soil': 0.0, 'ACC-bannister, banister, balustrade, balusters, handrail': 0.0, 'ACC-escalator, moving staircase, moving stairway': 0.0, 'ACC-ottoman, pouf, pouffe, puff, hassock': 0.0, 'ACC-bottle': 0.0, 'ACC-buffet, counter, sideboard': 0.0, 'ACC-poster, posting, placard, notice, bill, card': 0.0, 'ACC-stage': 0.0, 'ACC-van': 0.0, 'ACC-ship': 0.0, 'ACC-fountain': 0.0, 'ACC-conveyer belt, conveyor belt, conveyer, conveyor, transporter': 0.0, 'ACC-canopy': 0.0, 'ACC-washer, automatic washer, washing machine': 0.0, 'ACC-plaything, toy': 0.0, 'ACC-swimming pool, swimming bath, natatorium': 0.0, 'ACC-stool': 0.0, 'ACC-barrel, cask': 0.0, 'ACC-basket, handbasket': 0.0, 'ACC-waterfall, falls': 0.0, 'ACC-tent, collapsible shelter': 0.0, 'ACC-bag': 0.0, 'ACC-minibike, motorbike': 1.8859137257480372, 'ACC-cradle': 0.0, 'ACC-oven': 0.0, 'ACC-ball': 0.0, 'ACC-food, solid food': 0.013757210425252814, 'ACC-step, stair': 0.0, 'ACC-tank, storage tank': 0.0, 'ACC-trade name, brand name, brand, marque': 0.0, 'ACC-microwave, microwave oven': 0.1162201039074817, 'ACC-pot, flowerpot': 0.0, 'ACC-animal, animate being, beast, brute, creature, fauna': 32.100935974757846, 'ACC-bicycle, bike, wheel, cycle ': 15.961286947423488, 'ACC-lake': 0.0, 'ACC-dishwasher, dish washer, dishwashing machine': 0.0, 'ACC-screen, silver screen, projection screen': 0.0, 'ACC-blanket, cover': 0.0, 'ACC-sculpture': 0.0, 'ACC-hood, exhaust hood': 0.0, 'ACC-sconce': 0.0, 'ACC-vase': 0.0, 'ACC-traffic light, traffic signal, stoplight': 4.604608853850819, 'ACC-tray': 0.0, 'ACC-ashcan, trash can, garbage can, wastebin, ash bin, ash-bin, ashbin, dustbin, trash barrel, trash bin': 0.0, 'ACC-fan': 0.0, 'ACC-pier, wharf, wharfage, dock': 0.0, 'ACC-crt screen': 0.0, 'ACC-plate': 0.0, 'ACC-monitor, monitoring device': 0.0, 'ACC-bulletin board, notice board': 0.009968412592597207, 'ACC-shower': 0.0, 'ACC-radiator': 0.0, 'ACC-glass, drinking glass': 0.0, 'ACC-clock': 0.0})])
[03/05 20:05:09 d2.engine.defaults]: Evaluation results for ade_sem_seg_val in csv format:
[03/05 20:05:09 d2.evaluation.testing]: copypaste: Task: sem_seg
[03/05 20:05:09 d2.evaluation.testing]: copypaste: mIoU,fwIoU,mACC,pACC
[03/05 20:05:09 d2.evaluation.testing]: copypaste: 0.8857,1.1621,1.2483,2.0072
[03/05 20:05:09 mask2former.data.dataset_mappers.semantic_dataset_mapper]: [SemanticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=..., max_size=4096, sample_style='choice'), RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[768, 768], single_category_max_area=1.0, ignored_category=255), <detectron2.projects.point_rend.color_augmentation.ColorAugSSDTransform object at 0x7f2557ad3e80>, RandomFlip()]
[03/05 20:05:09 mask2former.data.dataset_mappers.semantic_dataset_mapper]: [SemanticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=..., max_size=4096, sample_style='choice'), RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[768, 768], single_category_max_area=1.0, ignored_category=255), <detectron2.projects.point_rend.color_augmentation.ColorAugSSDTransform object at 0x7f2557ad3c10>, RandomFlip()]
[03/05 20:05:09 mask2former.data.dataset_mappers.semantic_dataset_mapper]: [SemanticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=..., max_size=4096, sample_style='choice'), RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[768, 768], single_category_max_area=1.0, ignored_category=255), <detectron2.projects.point_rend.color_augmentation.ColorAugSSDTransform object at 0x7f2557ad3100>, RandomFlip()]
[03/05 20:05:09 mask2former.data.dataset_mappers.semantic_dataset_mapper]: [SemanticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=..., max_size=4096, sample_style='choice'), RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[768, 768], single_category_max_area=1.0, ignored_category=255), <detectron2.projects.point_rend.color_augmentation.ColorAugSSDTransform object at 0x7f2557ad34c0>, RandomFlip()]
[03/05 20:05:09 mask2former.data.dataset_mappers.semantic_dataset_mapper]: [SemanticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=..., max_size=4096, sample_style='choice'), RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[768, 768], single_category_max_area=1.0, ignored_category=255), <detectron2.projects.point_rend.color_augmentation.ColorAugSSDTransform object at 0x7f2557ad3970>, RandomFlip()]
[03/05 20:05:09 mask2former.data.dataset_mappers.semantic_dataset_mapper]: [SemanticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=..., max_size=4096, sample_style='choice'), RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[768, 768], single_category_max_area=1.0, ignored_category=255), <detectron2.projects.point_rend.color_augmentation.ColorAugSSDTransform object at 0x7f2557ad3ca0>, RandomFlip()]
[03/05 20:05:09 mask2former.data.dataset_mappers.semantic_dataset_mapper]: [SemanticDatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=..., max_size=4096, sample_style='choice'), RandomCrop_CategoryAreaConstraint(crop_type='absolute', crop_size=[768, 768], single_category_max_area=1.0, ignored_category=255), <detectron2.projects.point_rend.color_augmentation.ColorAugSSDTransform object at 0x7f2559e28970>, RandomFlip()]
[03/05 20:05:09 mask2former.data.dataloader.DaliDataLoader]: evaluate coco_sem_seg_val
[03/05 20:05:09 d2.data.common]: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[03/05 20:05:09 d2.data.common]: Serializing 5000 elements to byte tensors and concatenating them all ...
[03/05 20:05:09 d2.data.common]: Serialized dataset takes 1.16 MiB
[03/05 20:05:10 d2.evaluation.evaluator]: Start inference on 5000 batches
[03/05 20:05:12 d2.evaluation.evaluator]: Inference done 30/5000. Dataloading: 0.0018 s/iter. Inference: 0.0530 s/iter. Eval: 0.0135 s/iter. Total: 0.0684 s/iter. ETA=0:05:39
[03/05 20:05:17 d2.evaluation.evaluator]: Inference done 112/5000. Dataloading: 0.0018 s/iter. Inference: 0.0480 s/iter. Eval: 0.0131 s/iter. Total: 0.0629 s/iter. ETA=0:05:07
[03/05 20:05:22 d2.evaluation.evaluator]: Inference done 189/5000. Dataloading: 0.0018 s/iter. Inference: 0.0490 s/iter. Eval: 0.0131 s/iter. Total: 0.0639 s/iter. ETA=0:05:07
[03/05 20:05:27 d2.evaluation.evaluator]: Inference done 273/5000. Dataloading: 0.0017 s/iter. Inference: 0.0477 s/iter. Eval: 0.0131 s/iter. Total: 0.0626 s/iter. ETA=0:04:55
[03/05 20:05:32 d2.evaluation.evaluator]: Inference done 364/5000. Dataloading: 0.0017 s/iter. Inference: 0.0458 s/iter. Eval: 0.0132 s/iter. Total: 0.0608 s/iter. ETA=0:04:41
[03/05 20:05:37 d2.evaluation.evaluator]: Inference done 450/5000. Dataloading: 0.0017 s/iter. Inference: 0.0454 s/iter. Eval: 0.0131 s/iter. Total: 0.0602 s/iter. ETA=0:04:34
[03/05 20:05:42 d2.evaluation.evaluator]: Inference done 542/5000. Dataloading: 0.0017 s/iter. Inference: 0.0447 s/iter. Eval: 0.0129 s/iter. Total: 0.0593 s/iter. ETA=0:04:24
[03/05 20:05:47 d2.evaluation.evaluator]: Inference done 629/5000. Dataloading: 0.0016 s/iter. Inference: 0.0445 s/iter. Eval: 0.0128 s/iter. Total: 0.0590 s/iter. ETA=0:04:18
[03/05 20:05:52 d2.evaluation.evaluator]: Inference done 719/5000. Dataloading: 0.0016 s/iter. Inference: 0.0442 s/iter. Eval: 0.0128 s/iter. Total: 0.0587 s/iter. ETA=0:04:11
[03/05 20:05:57 d2.evaluation.evaluator]: Inference done 813/5000. Dataloading: 0.0016 s/iter. Inference: 0.0437 s/iter. Eval: 0.0128 s/iter. Total: 0.0581 s/iter. ETA=0:04:03
[03/05 20:06:02 d2.evaluation.evaluator]: Inference done 899/5000. Dataloading: 0.0016 s/iter. Inference: 0.0437 s/iter. Eval: 0.0128 s/iter. Total: 0.0581 s/iter. ETA=0:03:58
[03/05 20:06:07 d2.evaluation.evaluator]: Inference done 989/5000. Dataloading: 0.0016 s/iter. Inference: 0.0435 s/iter. Eval: 0.0128 s/iter. Total: 0.0579 s/iter. ETA=0:03:52
[03/05 20:06:12 d2.evaluation.evaluator]: Inference done 1079/5000. Dataloading: 0.0016 s/iter. Inference: 0.0434 s/iter. Eval: 0.0127 s/iter. Total: 0.0578 s/iter. ETA=0:03:46
[03/05 20:06:17 d2.evaluation.evaluator]: Inference done 1163/5000. Dataloading: 0.0016 s/iter. Inference: 0.0435 s/iter. Eval: 0.0128 s/iter. Total: 0.0579 s/iter. ETA=0:03:42
[03/05 20:06:23 d2.evaluation.evaluator]: Inference done 1249/5000. Dataloading: 0.0016 s/iter. Inference: 0.0435 s/iter. Eval: 0.0129 s/iter. Total: 0.0580 s/iter. ETA=0:03:37
[03/05 20:06:28 d2.evaluation.evaluator]: Inference done 1326/5000. Dataloading: 0.0016 s/iter. Inference: 0.0438 s/iter. Eval: 0.0129 s/iter. Total: 0.0584 s/iter. ETA=0:03:34
[03/05 20:06:33 d2.evaluation.evaluator]: Inference done 1409/5000. Dataloading: 0.0016 s/iter. Inference: 0.0439 s/iter. Eval: 0.0130 s/iter. Total: 0.0586 s/iter. ETA=0:03:30
[03/05 20:06:38 d2.evaluation.evaluator]: Inference done 1502/5000. Dataloading: 0.0016 s/iter. Inference: 0.0437 s/iter. Eval: 0.0129 s/iter. Total: 0.0583 s/iter. ETA=0:03:23
[03/05 20:06:43 d2.evaluation.evaluator]: Inference done 1581/5000. Dataloading: 0.0016 s/iter. Inference: 0.0440 s/iter. Eval: 0.0129 s/iter. Total: 0.0586 s/iter. ETA=0:03:20
[03/05 20:06:48 d2.evaluation.evaluator]: Inference done 1661/5000. Dataloading: 0.0016 s/iter. Inference: 0.0442 s/iter. Eval: 0.0129 s/iter. Total: 0.0588 s/iter. ETA=0:03:16
[03/05 20:06:53 d2.evaluation.evaluator]: Inference done 1743/5000. Dataloading: 0.0016 s/iter. Inference: 0.0443 s/iter. Eval: 0.0129 s/iter. Total: 0.0589 s/iter. ETA=0:03:11
[03/05 20:06:58 d2.evaluation.evaluator]: Inference done 1831/5000. Dataloading: 0.0016 s/iter. Inference: 0.0442 s/iter. Eval: 0.0129 s/iter. Total: 0.0588 s/iter. ETA=0:03:06
[03/05 20:07:03 d2.evaluation.evaluator]: Inference done 1921/5000. Dataloading: 0.0016 s/iter. Inference: 0.0441 s/iter. Eval: 0.0129 s/iter. Total: 0.0587 s/iter. ETA=0:03:00
[03/05 20:07:08 d2.evaluation.evaluator]: Inference done 2011/5000. Dataloading: 0.0016 s/iter. Inference: 0.0441 s/iter. Eval: 0.0128 s/iter. Total: 0.0586 s/iter. ETA=0:02:55
[03/05 20:07:13 d2.evaluation.evaluator]: Inference done 2109/5000. Dataloading: 0.0016 s/iter. Inference: 0.0438 s/iter. Eval: 0.0128 s/iter. Total: 0.0583 s/iter. ETA=0:02:48
[03/05 20:07:18 d2.evaluation.evaluator]: Inference done 2199/5000. Dataloading: 0.0016 s/iter. Inference: 0.0437 s/iter. Eval: 0.0128 s/iter. Total: 0.0582 s/iter. ETA=0:02:43
[03/05 20:07:23 d2.evaluation.evaluator]: Inference done 2291/5000. Dataloading: 0.0016 s/iter. Inference: 0.0436 s/iter. Eval: 0.0128 s/iter. Total: 0.0581 s/iter. ETA=0:02:37
[03/05 20:07:28 d2.evaluation.evaluator]: Inference done 2383/5000. Dataloading: 0.0016 s/iter. Inference: 0.0436 s/iter. Eval: 0.0127 s/iter. Total: 0.0580 s/iter. ETA=0:02:31
[03/05 20:07:33 d2.evaluation.evaluator]: Inference done 2471/5000. Dataloading: 0.0016 s/iter. Inference: 0.0436 s/iter. Eval: 0.0127 s/iter. Total: 0.0579 s/iter. ETA=0:02:26
[03/05 20:07:38 d2.evaluation.evaluator]: Inference done 2564/5000. Dataloading: 0.0016 s/iter. Inference: 0.0435 s/iter. Eval: 0.0127 s/iter. Total: 0.0578 s/iter. ETA=0:02:20
[03/05 20:07:43 d2.evaluation.evaluator]: Inference done 2659/5000. Dataloading: 0.0016 s/iter. Inference: 0.0433 s/iter. Eval: 0.0127 s/iter. Total: 0.0576 s/iter. ETA=0:02:14
[03/05 20:07:48 d2.evaluation.evaluator]: Inference done 2748/5000. Dataloading: 0.0016 s/iter. Inference: 0.0432 s/iter. Eval: 0.0127 s/iter. Total: 0.0576 s/iter. ETA=0:02:09
[03/05 20:07:53 d2.evaluation.evaluator]: Inference done 2836/5000. Dataloading: 0.0016 s/iter. Inference: 0.0432 s/iter. Eval: 0.0127 s/iter. Total: 0.0576 s/iter. ETA=0:02:04
[03/05 20:07:58 d2.evaluation.evaluator]: Inference done 2926/5000. Dataloading: 0.0016 s/iter. Inference: 0.0432 s/iter. Eval: 0.0127 s/iter. Total: 0.0575 s/iter. ETA=0:01:59
[03/05 20:08:03 d2.evaluation.evaluator]: Inference done 3011/5000. Dataloading: 0.0016 s/iter. Inference: 0.0432 s/iter. Eval: 0.0127 s/iter. Total: 0.0576 s/iter. ETA=0:01:54
[03/05 20:08:08 d2.evaluation.evaluator]: Inference done 3103/5000. Dataloading: 0.0016 s/iter. Inference: 0.0431 s/iter. Eval: 0.0127 s/iter. Total: 0.0575 s/iter. ETA=0:01:49
[03/05 20:08:13 d2.evaluation.evaluator]: Inference done 3193/5000. Dataloading: 0.0016 s/iter. Inference: 0.0431 s/iter. Eval: 0.0127 s/iter. Total: 0.0574 s/iter. ETA=0:01:43
[03/05 20:08:18 d2.evaluation.evaluator]: Inference done 3287/5000. Dataloading: 0.0016 s/iter. Inference: 0.0430 s/iter. Eval: 0.0127 s/iter. Total: 0.0573 s/iter. ETA=0:01:38
[03/05 20:08:24 d2.evaluation.evaluator]: Inference done 3376/5000. Dataloading: 0.0016 s/iter. Inference: 0.0430 s/iter. Eval: 0.0127 s/iter. Total: 0.0573 s/iter. ETA=0:01:33
[03/05 20:08:29 d2.evaluation.evaluator]: Inference done 3474/5000. Dataloading: 0.0016 s/iter. Inference: 0.0428 s/iter. Eval: 0.0127 s/iter. Total: 0.0571 s/iter. ETA=0:01:27
[03/05 20:08:34 d2.evaluation.evaluator]: Inference done 3568/5000. Dataloading: 0.0016 s/iter. Inference: 0.0427 s/iter. Eval: 0.0127 s/iter. Total: 0.0571 s/iter. ETA=0:01:21
[03/05 20:08:39 d2.evaluation.evaluator]: Inference done 3659/5000. Dataloading: 0.0016 s/iter. Inference: 0.0427 s/iter. Eval: 0.0127 s/iter. Total: 0.0570 s/iter. ETA=0:01:16
[03/05 20:08:44 d2.evaluation.evaluator]: Inference done 3753/5000. Dataloading: 0.0016 s/iter. Inference: 0.0426 s/iter. Eval: 0.0127 s/iter. Total: 0.0569 s/iter. ETA=0:01:10
[03/05 20:08:49 d2.evaluation.evaluator]: Inference done 3846/5000. Dataloading: 0.0016 s/iter. Inference: 0.0426 s/iter. Eval: 0.0127 s/iter. Total: 0.0569 s/iter. ETA=0:01:05
[03/05 20:08:54 d2.evaluation.evaluator]: Inference done 3941/5000. Dataloading: 0.0016 s/iter. Inference: 0.0425 s/iter. Eval: 0.0126 s/iter. Total: 0.0568 s/iter. ETA=0:01:00
[03/05 20:08:59 d2.evaluation.evaluator]: Inference done 4032/5000. Dataloading: 0.0016 s/iter. Inference: 0.0425 s/iter. Eval: 0.0126 s/iter. Total: 0.0567 s/iter. ETA=0:00:54
[03/05 20:09:04 d2.evaluation.evaluator]: Inference done 4119/5000. Dataloading: 0.0016 s/iter. Inference: 0.0425 s/iter. Eval: 0.0126 s/iter. Total: 0.0568 s/iter. ETA=0:00:50
[03/05 20:09:09 d2.evaluation.evaluator]: Inference done 4211/5000. Dataloading: 0.0016 s/iter. Inference: 0.0425 s/iter. Eval: 0.0126 s/iter. Total: 0.0567 s/iter. ETA=0:00:44
[03/05 20:09:14 d2.evaluation.evaluator]: Inference done 4308/5000. Dataloading: 0.0016 s/iter. Inference: 0.0423 s/iter. Eval: 0.0126 s/iter. Total: 0.0566 s/iter. ETA=0:00:39
[03/05 20:09:19 d2.evaluation.evaluator]: Inference done 4394/5000. Dataloading: 0.0016 s/iter. Inference: 0.0424 s/iter. Eval: 0.0126 s/iter. Total: 0.0566 s/iter. ETA=0:00:34
[03/05 20:09:24 d2.evaluation.evaluator]: Inference done 4480/5000. Dataloading: 0.0016 s/iter. Inference: 0.0424 s/iter. Eval: 0.0127 s/iter. Total: 0.0567 s/iter. ETA=0:00:29
[03/05 20:09:29 d2.evaluation.evaluator]: Inference done 4573/5000. Dataloading: 0.0016 s/iter. Inference: 0.0424 s/iter. Eval: 0.0127 s/iter. Total: 0.0566 s/iter. ETA=0:00:24
[03/05 20:09:34 d2.evaluation.evaluator]: Inference done 4664/5000. Dataloading: 0.0016 s/iter. Inference: 0.0423 s/iter. Eval: 0.0127 s/iter. Total: 0.0566 s/iter. ETA=0:00:19
[03/05 20:09:39 d2.evaluation.evaluator]: Inference done 4753/5000. Dataloading: 0.0016 s/iter. Inference: 0.0423 s/iter. Eval: 0.0127 s/iter. Total: 0.0566 s/iter. ETA=0:00:13
[03/05 20:09:44 d2.evaluation.evaluator]: Inference done 4840/5000. Dataloading: 0.0016 s/iter. Inference: 0.0424 s/iter. Eval: 0.0127 s/iter. Total: 0.0567 s/iter. ETA=0:00:09
[03/05 20:09:49 d2.evaluation.evaluator]: Inference done 4932/5000. Dataloading: 0.0016 s/iter. Inference: 0.0424 s/iter. Eval: 0.0127 s/iter. Total: 0.0566 s/iter. ETA=0:00:03
[03/05 20:09:53 d2.evaluation.evaluator]: Total inference time: 0:04:42.757590 (0.056608 s / iter per device, on 1 devices)
[03/05 20:09:53 d2.evaluation.evaluator]: Total inference pure compute time: 0:03:31 (0.042329 s / iter per device, on 1 devices)
[03/05 20:09:53 d2.evaluation.sem_seg_evaluation]: OrderedDict([('sem_seg', {'mIoU': 15.665760071681436, 'fwIoU': 40.86473803939906, 'IoU-rug-merged': 70.40936551340764, 'BoundaryIoU-rug-merged': 70.9044967492348, 'min(IoU, B-Iou)-rug-merged': 70.40936551340764, 'IoU-person': 25.493983939128867, 'BoundaryIoU-person': 0.40194636656276206, 'min(IoU, B-Iou)-person': 0.40194636656276206, 'IoU-bicycle': 34.98169008250889, 'BoundaryIoU-bicycle': 0.0, 'min(IoU, B-Iou)-bicycle': 0.0, 'IoU-car': 41.25853517586194, 'BoundaryIoU-car': 0.0, 'min(IoU, B-Iou)-car': 0.0, 'IoU-motorcycle': 39.04528119855385, 'BoundaryIoU-motorcycle': 0.0, 'min(IoU, B-Iou)-motorcycle': 0.0, 'IoU-airplane': 36.9443057297256, 'BoundaryIoU-airplane': 0.0, 'min(IoU, B-Iou)-airplane': 0.0, 'IoU-bus': 36.39828587604851, 'BoundaryIoU-bus': 0.0, 'min(IoU, B-Iou)-bus': 0.0, 'IoU-train': 6.80852053308281, 'BoundaryIoU-train': 0.0, 'min(IoU, B-Iou)-train': 0.0, 'IoU-truck': 28.298077543594367, 'BoundaryIoU-truck': 0.0, 'min(IoU, B-Iou)-truck': 0.0, 'IoU-boat': 0.0, 'BoundaryIoU-boat': 0.0, 'min(IoU, B-Iou)-boat': 0.0, 'IoU-traffic light': 23.757951973298137, 'BoundaryIoU-traffic light': 0.0, 'min(IoU, B-Iou)-traffic light': 0.0, 'IoU-fire hydrant': 59.94754022238744, 'BoundaryIoU-fire hydrant': 0.0, 'min(IoU, B-Iou)-fire hydrant': 0.0, 'IoU-stop sign': 0.10520935846758626, 'BoundaryIoU-stop sign': 0.0, 'min(IoU, B-Iou)-stop sign': 0.0, 'IoU-parking meter': 12.528557267216433, 'BoundaryIoU-parking meter': 0.0, 'min(IoU, B-Iou)-parking meter': 0.0, 'IoU-bench': 40.520210148066, 'BoundaryIoU-bench': 0.0, 'min(IoU, B-Iou)-bench': 0.0, 'IoU-bird': 39.41512367402854, 'BoundaryIoU-bird': 0.0, 'min(IoU, B-Iou)-bird': 0.0, 'IoU-cat': 10.712642283502277, 'BoundaryIoU-cat': 0.0, 'min(IoU, B-Iou)-cat': 0.0, 'IoU-dog': 14.067559008844235, 'BoundaryIoU-dog': 0.0, 'min(IoU, B-Iou)-dog': 0.0, 'IoU-horse': 0.7275013660095005, 'BoundaryIoU-horse': 0.0, 'min(IoU, B-Iou)-horse': 0.0, 'IoU-sheep': 6.240192826736333, 'BoundaryIoU-sheep': 0.0, 'min(IoU, B-Iou)-sheep': 0.0, 'IoU-cow': 37.45099048286018, 'BoundaryIoU-cow': 0.0, 'min(IoU, B-Iou)-cow': 0.0, 'IoU-elephant': 0.023369703815658855, 'BoundaryIoU-elephant': 0.0, 'min(IoU, B-Iou)-elephant': 0.0, 'IoU-bear': 77.25190438030347, 'BoundaryIoU-bear': 0.0, 'min(IoU, B-Iou)-bear': 0.0, 'IoU-zebra': 57.87067646406335, 'BoundaryIoU-zebra': 0.0, 'min(IoU, B-Iou)-zebra': 0.0, 'IoU-giraffe': 0.0, 'BoundaryIoU-giraffe': 0.0, 'min(IoU, B-Iou)-giraffe': 0.0, 'IoU-backpack': 21.319673830215052, 'BoundaryIoU-backpack': 0.0, 'min(IoU, B-Iou)-backpack': 0.0, 'IoU-umbrella': 0.0, 'BoundaryIoU-umbrella': 0.0, 'min(IoU, B-Iou)-umbrella': 0.0, 'IoU-handbag': 0.0, 'BoundaryIoU-handbag': 0.0, 'min(IoU, B-Iou)-handbag': 0.0, 'IoU-tie': 0.2122484862163573, 'BoundaryIoU-tie': 0.0, 'min(IoU, B-Iou)-tie': 0.0, 'IoU-suitcase': 0.0, 'BoundaryIoU-suitcase': 0.0, 'min(IoU, B-Iou)-suitcase': 0.0, 'IoU-frisbee': 0.0, 'BoundaryIoU-frisbee': 0.0, 'min(IoU, B-Iou)-frisbee': 0.0, 'IoU-skis': 0.0, 'BoundaryIoU-skis': 0.0, 'min(IoU, B-Iou)-skis': 0.0, 'IoU-snowboard': 0.008269503106232104, 'BoundaryIoU-snowboard': 0.0, 'min(IoU, B-Iou)-snowboard': 0.0, 'IoU-sports ball': 0.0, 'BoundaryIoU-sports ball': 0.0, 'min(IoU, B-Iou)-sports ball': 0.0, 'IoU-kite': 0.0, 'BoundaryIoU-kite': 0.0, 'min(IoU, B-Iou)-kite': 0.0, 'IoU-baseball bat': 0.0, 'BoundaryIoU-baseball bat': 0.0, 'min(IoU, B-Iou)-baseball bat': 0.0, 'IoU-baseball glove': 0.0, 'BoundaryIoU-baseball glove': 0.0, 'min(IoU, B-Iou)-baseball glove': 0.0, 'IoU-skateboard': 0.028909269473567607, 'BoundaryIoU-skateboard': 0.0, 'min(IoU, B-Iou)-skateboard': 0.0, 'IoU-surfboard': 0.00020074838999791222, 'BoundaryIoU-surfboard': 0.0, 'min(IoU, B-Iou)-surfboard': 0.0, 'IoU-tennis racket': 1.8723267502113319, 'BoundaryIoU-tennis racket': 0.0, 'min(IoU, B-Iou)-tennis racket': 0.0, 'IoU-bottle': 0.0, 'BoundaryIoU-bottle': 0.0, 'min(IoU, B-Iou)-bottle': 0.0, 'IoU-wine glass': 23.169516976043088, 'BoundaryIoU-wine glass': 0.0, 'min(IoU, B-Iou)-wine glass': 0.0, 'IoU-cup': 0.0, 'BoundaryIoU-cup': 0.0, 'min(IoU, B-Iou)-cup': 0.0, 'IoU-fork': 0.0, 'BoundaryIoU-fork': 0.0, 'min(IoU, B-Iou)-fork': 0.0, 'IoU-knife': 0.0, 'BoundaryIoU-knife': 0.0, 'min(IoU, B-Iou)-knife': 0.0, 'IoU-spoon': 26.003783667127895, 'BoundaryIoU-spoon': 0.0, 'min(IoU, B-Iou)-spoon': 0.0, 'IoU-bowl': 17.186693459740525, 'BoundaryIoU-bowl': 0.0, 'min(IoU, B-Iou)-bowl': 0.0, 'IoU-banana': 13.997599355828367, 'BoundaryIoU-banana': 0.0, 'min(IoU, B-Iou)-banana': 0.0, 'IoU-apple': 0.001337099177660129, 'BoundaryIoU-apple': 0.0, 'min(IoU, B-Iou)-apple': 0.0, 'IoU-sandwich': 19.117976132427486, 'BoundaryIoU-sandwich': 0.0, 'min(IoU, B-Iou)-sandwich': 0.0, 'IoU-orange': 27.565577806202423, 'BoundaryIoU-orange': 0.0, 'min(IoU, B-Iou)-orange': 0.0, 'IoU-broccoli': 0.0, 'BoundaryIoU-broccoli': 0.0, 'min(IoU, B-Iou)-broccoli': 0.0, 'IoU-carrot': 0.0, 'BoundaryIoU-carrot': 0.0, 'min(IoU, B-Iou)-carrot': 0.0, 'IoU-hot dog': 41.41143709360568, 'BoundaryIoU-hot dog': 0.0, 'min(IoU, B-Iou)-hot dog': 0.0, 'IoU-pizza': 0.2788809108931297, 'BoundaryIoU-pizza': 0.0, 'min(IoU, B-Iou)-pizza': 0.0, 'IoU-donut': 9.705985798828634, 'BoundaryIoU-donut': 0.0, 'min(IoU, B-Iou)-donut': 0.0, 'IoU-cake': 2.212320401100335, 'BoundaryIoU-cake': 0.0, 'min(IoU, B-Iou)-cake': 0.0, 'IoU-chair': 30.14752053358618, 'BoundaryIoU-chair': 0.0, 'min(IoU, B-Iou)-chair': 0.0, 'IoU-couch': 14.854950519995743, 'BoundaryIoU-couch': 0.0, 'min(IoU, B-Iou)-couch': 0.0, 'IoU-potted plant': 32.65819153967347, 'BoundaryIoU-potted plant': 0.0, 'min(IoU, B-Iou)-potted plant': 0.0, 'IoU-bed': 30.550347631519013, 'BoundaryIoU-bed': 0.0, 'min(IoU, B-Iou)-bed': 0.0, 'IoU-dining table': 39.34116964835337, 'BoundaryIoU-dining table': 0.0, 'min(IoU, B-Iou)-dining table': 0.0, 'IoU-toilet': 31.777743649170326, 'BoundaryIoU-toilet': 0.0, 'min(IoU, B-Iou)-toilet': 0.0, 'IoU-tv': 24.685909974822234, 'BoundaryIoU-tv': 0.0, 'min(IoU, B-Iou)-tv': 0.0, 'IoU-laptop': 0.0, 'BoundaryIoU-laptop': 0.0, 'min(IoU, B-Iou)-laptop': 0.0, 'IoU-mouse': 0.0, 'BoundaryIoU-mouse': 0.0, 'min(IoU, B-Iou)-mouse': 0.0, 'IoU-remote': 0.0, 'BoundaryIoU-remote': 0.0, 'min(IoU, B-Iou)-remote': 0.0, 'IoU-keyboard': 0.0036266010677530806, 'BoundaryIoU-keyboard': 0.0, 'min(IoU, B-Iou)-keyboard': 0.0, 'IoU-cell phone': 0.0, 'BoundaryIoU-cell phone': 0.0, 'min(IoU, B-Iou)-cell phone': 0.0, 'IoU-microwave': 2.5459971629758003, 'BoundaryIoU-microwave': 0.0, 'min(IoU, B-Iou)-microwave': 0.0, 'IoU-oven': 0.0, 'BoundaryIoU-oven': 0.0, 'min(IoU, B-Iou)-oven': 0.0, 'IoU-toaster': 0.02777970692409195, 'BoundaryIoU-toaster': 0.0, 'min(IoU, B-Iou)-toaster': 0.0, 'IoU-sink': 4.6226849802708125, 'BoundaryIoU-sink': 0.0, 'min(IoU, B-Iou)-sink': 0.0, 'IoU-refrigerator': 0.492751809930589, 'BoundaryIoU-refrigerator': 0.0, 'min(IoU, B-Iou)-refrigerator': 0.0, 'IoU-book': 47.48279869627488, 'BoundaryIoU-book': 0.0, 'min(IoU, B-Iou)-book': 0.0, 'IoU-clock': 1.354763782761935, 'BoundaryIoU-clock': 0.0, 'min(IoU, B-Iou)-clock': 0.0, 'IoU-vase': 0.0, 'BoundaryIoU-vase': 0.0, 'min(IoU, B-Iou)-vase': 0.0, 'IoU-scissors': 21.385071984040742, 'BoundaryIoU-scissors': 0.0, 'min(IoU, B-Iou)-scissors': 0.0, 'IoU-teddy bear': 0.0, 'BoundaryIoU-teddy bear': 0.0, 'min(IoU, B-Iou)-teddy bear': 0.0, 'IoU-hair drier': 0.0, 'BoundaryIoU-hair drier': 0.0, 'min(IoU, B-Iou)-hair drier': 0.0, 'IoU-toothbrush': 0.0, 'BoundaryIoU-toothbrush': 0.0, 'min(IoU, B-Iou)-toothbrush': 0.0, 'IoU-banner': 0.0037509312656935512, 'BoundaryIoU-banner': 0.0, 'min(IoU, B-Iou)-banner': 0.0, 'IoU-blanket': 0.0, 'BoundaryIoU-blanket': 0.0, 'min(IoU, B-Iou)-blanket': 0.0, 'IoU-bridge': 0.001641983308902271, 'BoundaryIoU-bridge': 0.0, 'min(IoU, B-Iou)-bridge': 0.0, 'IoU-cardboard': 0.001532039958103397, 'BoundaryIoU-cardboard': 0.0, 'min(IoU, B-Iou)-cardboard': 0.0, 'IoU-counter': 37.767588819366935, 'BoundaryIoU-counter': 0.0, 'min(IoU, B-Iou)-counter': 0.0, 'IoU-curtain': 4.666020241062572, 'BoundaryIoU-curtain': 0.0, 'min(IoU, B-Iou)-curtain': 0.0, 'IoU-door-stuff': 0.04792846118861152, 'BoundaryIoU-door-stuff': 0.0, 'min(IoU, B-Iou)-door-stuff': 0.0, 'IoU-floor-wood': 1.5580557827119152, 'BoundaryIoU-floor-wood': 0.0, 'min(IoU, B-Iou)-floor-wood': 0.0, 'IoU-flower': 0.00021641859685002731, 'BoundaryIoU-flower': 0.0, 'min(IoU, B-Iou)-flower': 0.0, 'IoU-fruit': 0.0006430659325854691, 'BoundaryIoU-fruit': 0.0, 'min(IoU, B-Iou)-fruit': 0.0, 'IoU-gravel': 0.0, 'BoundaryIoU-gravel': 0.0, 'min(IoU, B-Iou)-gravel': 0.0, 'IoU-house': 0.002214170066906781, 'BoundaryIoU-house': 0.0, 'min(IoU, B-Iou)-house': 0.0, 'IoU-light': 0.0, 'BoundaryIoU-light': 0.0, 'min(IoU, B-Iou)-light': 0.0, 'IoU-mirror-stuff': 0.0, 'BoundaryIoU-mirror-stuff': 0.0, 'min(IoU, B-Iou)-mirror-stuff': 0.0, 'IoU-net': 0.0, 'BoundaryIoU-net': 0.0, 'min(IoU, B-Iou)-net': 0.0, 'IoU-pillow': 0.0, 'BoundaryIoU-pillow': 0.0, 'min(IoU, B-Iou)-pillow': 0.0, 'IoU-platform': 54.87169398034744, 'BoundaryIoU-platform': 0.0, 'min(IoU, B-Iou)-platform': 0.0, 'IoU-playingfield': 4.039347896988009, 'BoundaryIoU-playingfield': 0.0, 'min(IoU, B-Iou)-playingfield': 0.0, 'IoU-railroad': 6.2684875163329, 'BoundaryIoU-railroad': 0.0, 'min(IoU, B-Iou)-railroad': 0.0, 'IoU-river': 35.150006682932684, 'BoundaryIoU-river': 0.0, 'min(IoU, B-Iou)-river': 0.0, 'IoU-road': 0.025924123597652282, 'BoundaryIoU-road': 0.0, 'min(IoU, B-Iou)-road': 0.0, 'IoU-roof': 26.273548086110793, 'BoundaryIoU-roof': 0.0, 'min(IoU, B-Iou)-roof': 0.0, 'IoU-sand': 61.16789354006512, 'BoundaryIoU-sand': 0.0, 'min(IoU, B-Iou)-sand': 0.0, 'IoU-sea': 0.05461033390413817, 'BoundaryIoU-sea': 0.0, 'min(IoU, B-Iou)-sea': 0.0, 'IoU-shelf': 65.87824631457345, 'BoundaryIoU-shelf': 0.0, 'min(IoU, B-Iou)-shelf': 0.0, 'IoU-snow': 0.0, 'BoundaryIoU-snow': 0.0, 'min(IoU, B-Iou)-snow': 0.0, 'IoU-stairs': 0.0, 'BoundaryIoU-stairs': 0.0, 'min(IoU, B-Iou)-stairs': 0.0, 'IoU-tent': 0.0, 'BoundaryIoU-tent': 0.0, 'min(IoU, B-Iou)-tent': 0.0, 'IoU-towel': 20.253788902346617, 'BoundaryIoU-towel': 0.0, 'min(IoU, B-Iou)-towel': 0.0, 'IoU-wall-brick': 0.003359749487563872, 'BoundaryIoU-wall-brick': 0.0, 'min(IoU, B-Iou)-wall-brick': 0.0, 'IoU-wall-stone': 35.78775699357053, 'BoundaryIoU-wall-stone': 0.0, 'min(IoU, B-Iou)-wall-stone': 0.0, 'IoU-wall-tile': 0.14423069935805422, 'BoundaryIoU-wall-tile': 0.0, 'min(IoU, B-Iou)-wall-tile': 0.0, 'IoU-wall-wood': 0.7232243034249358, 'BoundaryIoU-wall-wood': 0.0, 'min(IoU, B-Iou)-wall-wood': 0.0, 'IoU-water-other': 0.0005121374608461063, 'BoundaryIoU-water-other': 0.0, 'min(IoU, B-Iou)-water-other': 0.0, 'IoU-window-blind': 21.8991872193962, 'BoundaryIoU-window-blind': 0.0, 'min(IoU, B-Iou)-window-blind': 0.0, 'IoU-window-other': 62.235786565861574, 'BoundaryIoU-window-other': 0.0, 'min(IoU, B-Iou)-window-other': 0.0, 'IoU-tree-merged': 35.16554618612298, 'BoundaryIoU-tree-merged': 0.0, 'min(IoU, B-Iou)-tree-merged': 0.0, 'IoU-fence-merged': 35.15037602002811, 'BoundaryIoU-fence-merged': 0.0, 'min(IoU, B-Iou)-fence-merged': 0.0, 'IoU-ceiling-merged': 80.19626114820039, 'BoundaryIoU-ceiling-merged': 0.0, 'min(IoU, B-Iou)-ceiling-merged': 0.0, 'IoU-sky-other-merged': 21.998573670298594, 'BoundaryIoU-sky-other-merged': 0.0, 'min(IoU, B-Iou)-sky-other-merged': 0.0, 'IoU-cabinet-merged': 20.357758831250194, 'BoundaryIoU-cabinet-merged': 0.0, 'min(IoU, B-Iou)-cabinet-merged': 0.0, 'IoU-table-merged': 21.356952681010082, 'BoundaryIoU-table-merged': 0.0, 'min(IoU, B-Iou)-table-merged': 0.0, 'IoU-floor-other-merged': 29.48462559344635, 'BoundaryIoU-floor-other-merged': 0.0, 'min(IoU, B-Iou)-floor-other-merged': 0.0, 'IoU-pavement-merged': 31.679057771143484, 'BoundaryIoU-pavement-merged': 0.0, 'min(IoU, B-Iou)-pavement-merged': 0.0, 'IoU-mountain-merged': 57.62725849003202, 'BoundaryIoU-mountain-merged': 0.0, 'min(IoU, B-Iou)-mountain-merged': 0.0, 'IoU-grass-merged': 20.273163354635685, 'BoundaryIoU-grass-merged': 0.0, 'min(IoU, B-Iou)-grass-merged': 0.0, 'IoU-dirt-merged': 0.007505161317669323, 'BoundaryIoU-dirt-merged': 0.0, 'min(IoU, B-Iou)-dirt-merged': 0.0, 'IoU-paper-merged': 0.8325426016934778, 'BoundaryIoU-paper-merged': 0.0, 'min(IoU, B-Iou)-paper-merged': 0.0, 'IoU-food-other-merged': 40.945637976829985, 'BoundaryIoU-food-other-merged': 0.0, 'min(IoU, B-Iou)-food-other-merged': 0.0, 'IoU-building-other-merged': 13.462778854292523, 'BoundaryIoU-building-other-merged': 0.0, 'min(IoU, B-Iou)-building-other-merged': 0.0, 'IoU-rock-merged': 44.841595582354834, 'BoundaryIoU-rock-merged': 0.0, 'min(IoU, B-Iou)-rock-merged': 0.0, 'IoU-wall-other-merged': 5.057738390291111, 'BoundaryIoU-wall-other-merged': 0.0, 'min(IoU, B-Iou)-wall-other-merged': 0.0, 'mACC': 24.201211925912215, 'pACC': 56.91442980153184, 'ACC-rug-merged': 89.92334822249535, 'ACC-person': 48.09074075676424, 'ACC-bicycle': 49.411482867489084, 'ACC-car': 73.44679042166456, 'ACC-motorcycle': 71.40858487107904, 'ACC-airplane': 39.84716288890408, 'ACC-bus': 71.1945678715443, 'ACC-train': 7.604847580497373, 'ACC-truck': 52.75398544339587, 'ACC-boat': 0.0, 'ACC-traffic light': 65.04417410018489, 'ACC-fire hydrant': 70.99614201925651, 'ACC-stop sign': 0.15046324795850793, 'ACC-parking meter': 15.307069679096683, 'ACC-bench': 44.19537388937394, 'ACC-bird': 89.18770678773043, 'ACC-cat': 12.409331011592199, 'ACC-dog': 15.524829168539622, 'ACC-horse': 0.7455272917054027, 'ACC-sheep': 7.9301738496968905, 'ACC-cow': 87.32100776026441, 'ACC-elephant': 0.023369764423553496, 'ACC-bear': 87.01477073418182, 'ACC-zebra': 70.93457600565091, 'ACC-giraffe': 0.0, 'ACC-backpack': 21.939537581376815, 'ACC-umbrella': 0.0, 'ACC-handbag': 0.0, 'ACC-tie': 0.2132479692793192, 'ACC-suitcase': 0.0, 'ACC-frisbee': 0.0, 'ACC-skis': 0.0, 'ACC-snowboard': 0.008269503106232104, 'ACC-sports ball': 0.0, 'ACC-kite': 0.0, 'ACC-baseball bat': 0.0, 'ACC-baseball glove': 0.0, 'ACC-skateboard': 0.028916066388045506, 'ACC-surfboard': 0.0002007739837071912, 'ACC-tennis racket': 1.8985374877404118, 'ACC-bottle': 0.0, 'ACC-wine glass': 46.32073492070422, 'ACC-cup': 0.0, 'ACC-fork': 0.0, 'ACC-knife': 0.0, 'ACC-spoon': 46.67874659444549, 'ACC-bowl': 19.620160230353516, 'ACC-banana': 23.091007956006898, 'ACC-apple': 0.001337099177660129, 'ACC-sandwich': 25.02542832762095, 'ACC-orange': 34.1786587942905, 'ACC-broccoli': 0.0, 'ACC-carrot': 0.0, 'ACC-hot dog': 93.18058567529108, 'ACC-pizza': 0.2805467767767048, 'ACC-donut': 20.401854813426848, 'ACC-cake': 2.274878690947788, 'ACC-chair': 56.51453564110099, 'ACC-couch': 39.94731820997349, 'ACC-potted plant': 57.112795996231405, 'ACC-bed': 49.84836524102447, 'ACC-dining table': 72.16565674430106, 'ACC-toilet': 41.31114114775263, 'ACC-tv': 58.54808184890954, 'ACC-laptop': 0.0, 'ACC-mouse': 0.0, 'ACC-remote': 0.0, 'ACC-keyboard': 0.0036266010677530806, 'ACC-cell phone': 0.0, 'ACC-microwave': 2.6441575150232848, 'ACC-oven': 0.0, 'ACC-toaster': 0.02791434540247875, 'ACC-sink': 5.259856174401464, 'ACC-refrigerator': 0.499320557003166, 'ACC-book': 62.0049255848826, 'ACC-clock': 1.366140379547822, 'ACC-vase': 0.0, 'ACC-scissors': 28.697495390677613, 'ACC-teddy bear': 0.0, 'ACC-hair drier': 0.0, 'ACC-toothbrush': 0.0, 'ACC-banner': 0.008842397977021962, 'ACC-blanket': 0.0, 'ACC-bridge': 0.002123018758179439, 'ACC-cardboard': 0.001532258417571064, 'ACC-counter': 60.49626101099727, 'ACC-curtain': 5.681445107531531, 'ACC-door-stuff': 0.04907341679234279, 'ACC-floor-wood': 1.8166481308071007, 'ACC-flower': 0.00023125892153558238, 'ACC-fruit': 0.0006432469045350836, 'ACC-gravel': 0.0, 'ACC-house': 0.003409351912108104, 'ACC-light': 0.0, 'ACC-mirror-stuff': 0.0, 'ACC-net': 0.0, 'ACC-pillow': 0.0, 'ACC-platform': 76.83266525041685, 'ACC-playingfield': 4.072850980001584, 'ACC-railroad': 6.848304119028846, 'ACC-river': 52.72411612419816, 'ACC-road': 0.15087989504007301, 'ACC-roof': 31.761258730611143, 'ACC-sand': 88.27610164826987, 'ACC-sea': 0.05510463368442515, 'ACC-shelf': 82.14236222124234, 'ACC-snow': 0.0, 'ACC-stairs': 0.0, 'ACC-tent': 0.0, 'ACC-towel': 27.078032194206394, 'ACC-wall-brick': 0.003379364464158401, 'ACC-wall-stone': 53.83684358523022, 'ACC-wall-tile': 0.14691433993901762, 'ACC-wall-wood': 0.7515356454390981, 'ACC-water-other': 0.0005964632482287336, 'ACC-window-blind': 30.329870523974144, 'ACC-window-other': 77.93555829480475, 'ACC-tree-merged': 61.60294518641889, 'ACC-fence-merged': 60.57171530599278, 'ACC-ceiling-merged': 86.51187092280604, 'ACC-sky-other-merged': 50.7069801035978, 'ACC-cabinet-merged': 50.968120907597026, 'ACC-table-merged': 29.38045251606351, 'ACC-floor-other-merged': 52.98049328000589, 'ACC-pavement-merged': 47.3659909693119, 'ACC-mountain-merged': 76.70163165397642, 'ACC-grass-merged': 26.543840159340903, 'ACC-dirt-merged': 0.007512794943736922, 'ACC-paper-merged': 0.8549865949372187, 'ACC-food-other-merged': 61.5200119531522, 'ACC-building-other-merged': 48.02258630803015, 'ACC-rock-merged': 74.49876155452473, 'ACC-wall-other-merged': 7.956695851100908})])
[03/05 20:09:53 d2.engine.defaults]: Evaluation results for coco_sem_seg_val in csv format:
[03/05 20:09:53 d2.evaluation.testing]: copypaste: Task: sem_seg
[03/05 20:09:53 d2.evaluation.testing]: copypaste: mIoU,fwIoU,mACC,pACC
[03/05 20:09:53 d2.evaluation.testing]: copypaste: 15.6658,40.8647,24.2012,56.9144
